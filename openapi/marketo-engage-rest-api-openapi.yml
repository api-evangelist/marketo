openapi: 3.0.1
info:
  title: Marketo Engage Rest API
  description: >-
    Marketo exposes a REST API which allows for remote execution of many of the
    systems capabilities. From creating programs to bulk lead import, there are
    many options which allow fine-grained control of a Marketo instance.
  termsOfService: https://www.adobe.com/legal.html
  contact:
    name: Adobe Developer Relations
    url: https://experienceleague.adobe.com/en/docs/marketo-developer/marketo/home
    email: developerfeedback@marketo.com
  license:
    name: API License Agreement
    url: >-
      https://experienceleague.adobe.com/en/docs/marketo-developer/marketo/api-license
  version: '1.0'
servers:
  - url: https://localhost:8080/
tags:
  - name: Channels
    description: Channel Controller
  - name: Email Templates
    description: Email Template Controller
  - name: Emails
    description: Email Controller
  - name: File Contents
    description: File Content Controller
  - name: Files
    description: File Controller
  - name: Folders
    description: Folder Controller
  - name: Form Fields
    description: Form Field Controller
  - name: Forms
    description: Form Controller
  - name: Landing Page Content
    description: Landing Page Content Controller
  - name: Landing Pages
    description: Landing Page Controller
  - name: Landing Page Redirect Rules
    description: Landing Page Redirect Rule Controller
  - name: Landing Page Templates
    description: Landing Page Templates
  - name: Programs
    description: Program Controller
  - name: Segments
    description: Segment Controller
  - name: Smart Campaigns
    description: Smart Campaign Controller
  - name: Smart Lists
    description: Smart List Controller
  - name: Snippets
    description: Snippet Controller
  - name: Static Lists
    description: Static List Controller
  - name: Tags
    description: Tag Controller
  - name: Tokens
    description: Token Controller
paths:
  /rest/asset/v1/channel/byName.json:
    get:
      tags:
        - Rest
        - Assets
        - Channel
        - Channels
      summary: Get Channel by Name
      description: >-
        Retrieves channels based on the provided name. Required Permissions:
        Read-Only Assets, Read-Write Assets
      operationId: getChannelByNameUsingGET
      parameters:
        - name: Name
          in: query
          description: Name of channel to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfChannelResponse'
  /rest/asset/v1/channels.json:
    get:
      tags:
        - Rest
        - Assets
        - Channels
      summary: Get Channels
      description: >-
        Retrieves all channels. Required Permissions: Read-Only Assets,
        Read-Write Assets
      operationId: getAllChannelsUsingGET
      parameters:
        - name: maxReturn
          in: query
          description: Maximum number of channels to return. Max 200, default 20
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: Integer offset for paging
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfChannelResponse'
  /rest/asset/v1/email/byName.json:
    get:
      tags:
        - Rest
        - Assets
        - Email
        - Emails
      summary: Get Email by Name
      description: >-
        Returns an email records based on the given name. Required Permissions:
        Read-Only Assets, Read-Write Assets
      operationId: getEmailByNameUsingGET
      parameters:
        - name: name
          in: query
          description: Name of the email
          required: true
          schema:
            type: string
        - name: status
          in: query
          description: Status filter for draft or approved versions
          schema:
            type: string
            enum:
              - approved
              - draft
        - name: folder
          in: query
          description: >-
            JSON representation of parent folder, with members 'id', and 'type'
            which may be 'Folder' or 'Program'
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfEmailResponse'
  /rest/asset/v1/email/{id}.json:
    get:
      tags:
        - Rest
        - Assets
        - Email
        - Emails
      summary: Get Email By Id
      description: >-
        Returns an email records by its id. Required Permissions: Read-Only
        Assets, Read-Write Assets
      operationId: getEmailByIdUsingGET
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
        - name: status
          in: query
          description: Status filter for draft or approved versions
          schema:
            type: string
            enum:
              - approved
              - draft
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfEmailResponse'
    post:
      tags:
        - Rest
        - Assets
        - Email
        - Emails
      summary: Update Email Metadata
      description: >-
        Updates the metadata of an email asset. Required Permissions: Read-Write
        Assets
      operationId: updateEmailUsingPOST
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: updateEmailRequest
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UpdateEmailMetaDataRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfEmailResponse'
      x-codegen-request-body-name: updateEmailRequest
  /rest/asset/v1/email/{id}/approveDraft.json:
    post:
      tags:
        - Rest
        - Assets
        - Email
        - Approve
        - Emails
      summary: Approve Email Draft
      description: >-
        Approves the current draft of an email. Required Permissions: Approve
        Assets
      operationId: approveDraftUsingPOST
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfIdResponse'
  /rest/asset/v1/email/{id}/clone.json:
    post:
      tags:
        - Rest
        - Assets
        - Email
        - Emails
      summary: Clone Email
      description: 'Clones the target email. Required Permissions: Read-Write Assets'
      operationId: cloneEmailUsingPOST
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: cloneEmailRequest
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CloneEmailRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfEmailResponse'
      x-codegen-request-body-name: cloneEmailRequest
  /rest/asset/v1/email/{id}/content.json:
    get:
      tags:
        - Rest
        - Assets
        - Email
        - Emails
      summary: Get Email Content
      description: >-
        Returns the content of the designated email. Required Permissions:
        Read-Only Assets, Read-Write Assets
      operationId: getEmailContentByIdUsingGET
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
        - name: status
          in: query
          description: Status filter for draft or approved versions
          schema:
            type: string
            enum:
              - approved
              - draft
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfEmailContentResponse'
    post:
      tags:
        - Rest
        - Assets
        - Email
        - Emails
      summary: Update Email Content
      description: 'Updates the content of an email. Required Permissions: Read-Write Assets'
      operationId: updateEmailContentUsingPOST
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: updateEmailRequest
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UpdateEmailComponentDataRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfIdResponse'
      x-codegen-request-body-name: updateEmailRequest
  /rest/asset/v1/email/{id}/content/rearrange.json:
    post:
      tags:
        - Rest
        - Assets
        - Email
        - Content
        - Emails
      summary: Rearrange Email Modules
      description: >-
        Rearranges the modules in an email. Required Permissions: Read-Write
        Assets
      operationId: rearrangeModulesUsingPOST
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: >-
          JSON array of module positions. Each position must be a JSON object
          with members 'index' and a 'moduleId'
        content:
          application/x-www-form-urlencoded:
            schema:
              type: string
        required: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfEmailModuleResponse'
      x-codegen-request-body-name: positions
  /rest/asset/v1/email/{id}/content/{htmlId}.json:
    post:
      tags:
        - Rest
        - Assets
        - Email
        - Content
        - .Json
        - Emails
      summary: Update Email Content Section
      description: >-
        Updates the content in the given section. Required Permissions:
        Read-Write Assets
      operationId: updateEmailComponentContentUsingPOST
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
        - name: htmlId
          in: path
          description: htmlId
          required: true
          schema:
            type: string
      requestBody:
        description: request
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UpdateEmailComponentContentRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfIdResponse'
      x-codegen-request-body-name: request
  /rest/asset/v1/email/{id}/content/{moduleId}/add.json:
    post:
      tags:
        - Rest
        - Assets
        - Email
        - Content
        - Modules
        - Emails
      summary: Add Email Module
      description: >-
        Adds a new module to an email, with the given id. Required Permissions:
        Read-Write Assets
      operationId: addModuleUsingPOST
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
        - name: moduleId
          in: path
          description: moduleId
          required: true
          schema:
            type: string
        - name: name
          in: query
          description: Name of the module
          required: true
          schema:
            type: string
        - name: index
          in: query
          description: >-
            Index of the module. Determines the order of the module in the
            email.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfEmailModuleResponse'
  /rest/asset/v1/email/{id}/content/{moduleId}/delete.json:
    post:
      tags:
        - Rest
        - Assets
        - Email
        - Content
        - Modules
        - Emails
      summary: Delete Module
      description: >-
        Deletes the given module from the email. Required Permissions:
        Read-Write Assets
      operationId: deleteModuleUsingPOST
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
        - name: moduleId
          in: path
          description: moduleId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfEmailModuleResponse'
  /rest/asset/v1/email/{id}/content/{moduleId}/duplicate.json:
    post:
      tags:
        - Rest
        - Assets
        - Email
        - Content
        - Modules
        - Emails
      summary: Duplicate Email Module
      description: >-
        Creates a copy of the designated module in an email. Required
        Permissions: Read-Write Assets
      operationId: duplicateModuleUsingPOST
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
        - name: moduleId
          in: path
          description: moduleId
          required: true
          schema:
            type: string
        - name: name
          in: query
          description: Name of the new module
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfEmailModuleResponse'
  /rest/asset/v1/email/{id}/content/{moduleId}/rename.json:
    post:
      tags:
        - Rest
        - Assets
        - Email
        - Content
        - Modules
        - Emails
      summary: Rename Email Module
      description: 'Renames a module. Required Permissions: Read-Write Assets'
      operationId: renameUsingPOST
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
        - name: moduleId
          in: path
          description: moduleId
          required: true
          schema:
            type: string
        - name: name
          in: query
          description: New module name
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfEmailModuleResponse'
  /rest/asset/v1/email/{id}/delete.json:
    post:
      tags:
        - Rest
        - Assets
        - Email
        - Emails
      summary: Delete Email
      description: 'Deletes the target email. Required Permissions: Read-Write Assets'
      operationId: deleteEmailUsingPOST
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfIdResponse'
  /rest/asset/v1/email/{id}/discardDraft.json:
    post:
      tags:
        - Rest
        - Assets
        - Email
        - Discard
        - Emails
      summary: Discard Email Draft
      description: >-
        Discards the current draft of an email. Required Permissions: Read-Write
        Assets
      operationId: discardDraftUsingPOST
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfIdResponse'
  /rest/asset/v1/email/{id}/dynamicContent/{contentId}.json:
    get:
      tags:
        - Rest
        - Assets
        - Email
        - Dynamic
        - Content
        - Emails
      summary: Get Email Dynamic Content
      description: >-
        Retrieves the dyanmic content record for the given section. Required
        Permissions: Read-Only Assets, Read-Write Assets
      operationId: getEmailDynamicContentUsingGET
      parameters:
        - name: id
          in: path
          description: Id of email
          required: true
          schema:
            type: integer
            format: int32
        - name: contentId
          in: path
          description: Id of email dynamic content section
          required: true
          schema:
            type: string
        - name: status
          in: query
          description: Status filter for draft or approved versions
          schema:
            type: string
            enum:
              - approved
              - draft
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfEmailDynamicContentResponse'
    post:
      tags:
        - Rest
        - Assets
        - Email
        - Dynamic
        - Content
        - Emails
      summary: Update Email Dynamic Content Section
      description: >-
        Updates dynamic content in the given section. Required Permissions:
        Read-Write Assets
      operationId: updateEmailDynamicContentUsingPOST
      parameters:
        - name: id
          in: path
          description: Id of email
          required: true
          schema:
            type: integer
            format: int32
        - name: contentId
          in: path
          description: Id of email dynamic content section
          required: true
          schema:
            type: string
      requestBody:
        description: Content properties
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UpdateEmailDynamicContentRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfIdResponse'
      x-codegen-request-body-name: request
  /rest/asset/v1/email/{id}/sendSample.json:
    post:
      tags:
        - Rest
        - Assets
        - Email
        - Send
        - Emails
      summary: Send Sample Email
      description: >-
        Sends a sample email to the given email address. Leads may be
        impersonated to populate data for tokens and dynamic content. Required
        Permissions: Read-Write Assets
      operationId: sendSampleEmailUsingPOST
      parameters:
        - name: id
          in: path
          description: Id of the email
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: sendSampleEmailRequest
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SendSampleEmailRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfSendSampleResponse'
      x-codegen-request-body-name: sendSampleEmailRequest
  /rest/asset/v1/email/{id}/unapprove.json:
    post:
      tags:
        - Rest
        - Assets
        - Email
        - Emails
      summary: Unapprove Email
      description: >-
        Unapproves the email and reverts it to a draft-only state. Required
        Permissions: Approve Assets
      operationId: unapproveDraftUsingPOST
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfIdResponse'
  /rest/asset/v1/email/{id}/variable/{name}.json:
    post:
      tags:
        - Rest
        - Assets
        - Email
        - Variable
        - Name
        - Emails
      summary: Update Email Variable
      description: >-
        Updates the value of a given variable in an email. Required Permissions:
        Read-Write Assets
      operationId: updateVariableUsingPOST
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
        - name: name
          in: path
          description: name
          required: true
          schema:
            type: string
      requestBody:
        description: updateVariableRequest
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UpdateVariableRequest'
        required: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfEmailVariableResponse'
      x-codegen-request-body-name: updateVariableRequest
  /rest/asset/v1/email/{id}/variables.json:
    get:
      tags:
        - Rest
        - Assets
        - Email
        - Emails
      summary: Get Email Variables
      description: >-
        Returns a list of the available variables in an email. Required
        Permissions: Read-Only Assets, Read-Write Assets
      operationId: getEmailVariablesUsingGET
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfEmailVariableResponse'
  /rest/asset/v1/email/ccFields.json:
    get:
      tags:
        - Rest
        - Assets
        - Email
        - Cc
        - Emails
      summary: Get Email CC Fields
      description: >-
        Returns the set of fields enabled for Email CC in the target instance.
        Required Permissions: Read-Only Assets, Read-Write Assets
      operationId: getEmailCCFieldsUsingGET
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfEmailCCFieldsResponse'
  /rest/asset/v1/emailTemplate/byName.json:
    get:
      tags:
        - Rest
        - Assets
        - Email
        - Template
        - Email  Templates
      summary: Get Email Template by Name
      description: >-
        Retrieves and email template record by the given name. Required
        Permissions: Read-Only Assets, Read-Write Assets
      operationId: getTemplateByNameUsingGET
      parameters:
        - name: name
          in: query
          description: name
          required: true
          schema:
            type: string
        - name: status
          in: query
          description: Status filter for draft or approved versions
          schema:
            type: string
            enum:
              - approved
              - draft
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfEmailTemplateResponse'
  /rest/asset/v1/emailTemplate/{id}.json:
    get:
      tags:
        - Rest
        - Assets
        - Email
        - Template
        - Email  Templates
      summary: Get Email Template by Id
      description: >-
        Returns an email template record by its id. Required Permissions:
        Read-Only Assets, Read-Write Assets
      operationId: getTemplateByIdUsingGET
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
        - name: status
          in: query
          description: Status filter for draft or approved versions
          schema:
            type: string
            enum:
              - approved
              - draft
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfEmailTemplateResponse'
    post:
      tags:
        - Rest
        - Assets
        - Email
        - Template
        - Email  Templates
      summary: Update Email Template Metadata
      description: >-
        Updates the metadata for the designated email template. Required
        Permissions: Read-Write Assets
      operationId: updateEmailTemplateUsingPOST
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: updateEmailMetaDataRequest
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UpdateEmailTemplateMetaDataRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfEmailTemplateResponse'
      x-codegen-request-body-name: updateEmailMetaDataRequest
  /rest/asset/v1/emailTemplate/{id}/approveDraft.json:
    post:
      tags:
        - Rest
        - Assets
        - Email
        - Template
        - Approve
        - Email  Templates
      summary: Approve Email Template Draft
      description: >-
        Approves the current draft of the email template. Required Permissions:
        Approve Assets
      operationId: approveDraftUsingPOST_1
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfEmailTemplateResponse'
  /rest/asset/v1/emailTemplate/{id}/clone.json:
    post:
      tags:
        - Rest
        - Assets
        - Email
        - Template
        - Email  Templates
      summary: Clone Email Template
      description: >-
        Clones the designated email template. Required Permissions: Read-Write
        Assets
      operationId: cloneTemplateUsingPOST
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: cloneEmailTemplateRequest
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CloneEmailTemplateRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfEmailTemplateResponse'
      x-codegen-request-body-name: cloneEmailTemplateRequest
  /rest/asset/v1/emailTemplate/{id}/content:
    get:
      tags:
        - Rest
        - Assets
        - Email
        - Template
        - Content
      summary: Get Email Template Content by Id
      description: >-
        Returns the content for a given email template. Required Permissions:
        Read-Only Assets, Read-Write Assets
      operationId: getTemplateContentByIdUsingGET
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
        - name: status
          in: query
          description: Status filter for draft or approved versions
          schema:
            type: string
            enum:
              - approved
              - draft
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfEmailTemplateContentResponse'
  /rest/asset/v1/emailTemplate/{id}/content.json:
    post:
      tags:
        - Rest
        - Assets
        - Email
        - Template
        - Email  Templates
      summary: Update Email Template Content
      description: >-
        Updates the content of the given email template. Required Permissions:
        Read-Write Assets
      operationId: updateEmailTemplateContentUsingPOST
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: updateEmailTemplateContentRequest
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateEmailTemplateContentRequest'
        required: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfIdResponse'
      x-codegen-request-body-name: updateEmailTemplateContentRequest
  /rest/asset/v1/emailTemplate/{id}/delete.json:
    post:
      tags:
        - Rest
        - Assets
        - Email
        - Template
        - Email  Templates
      summary: Delete Email Template
      description: >-
        Deletes the designated email template. Required Permissions: Read-Write
        Assets
      operationId: deleteTemplateUsingPOST
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfIdResponse'
  /rest/asset/v1/emailTemplate/{id}/discardDraft.json:
    post:
      tags:
        - Rest
        - Assets
        - Email
        - Template
        - Discard
        - Email  Templates
      summary: Discard Email Template Draft
      description: >-
        Discards the current draft of the email template. Required Permissions:
        Read-Write Assets
      operationId: discardDraftUsingPOST_1
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfIdResponse'
  /rest/asset/v1/emailTemplate/{id}/unapprove.json:
    post:
      tags:
        - Rest
        - Assets
        - Email
        - Template
        - Email  Templates
      summary: Unapprove Email Template Draft
      description: >-
        Unapproves the current approved version of the Email Template. Required
        Permissions: Approve Assets
      operationId: unapproveDraftUsingPOST_1
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfEmailTemplateResponse'
  /rest/asset/v1/emailTemplates.json:
    get:
      tags:
        - Rest
        - Assets
        - Email
        - Email  Templates
      summary: Get Email Templates
      description: >-
        Returns a list of email template records accessible in the target
        instance. Required Permissions: Read-Only Assets, Read-Write Assets
      operationId: getEmailTemplatesUsingGET
      parameters:
        - name: offset
          in: query
          description: Integer offset for paging
          schema:
            type: integer
            format: int32
        - name: maxReturn
          in: query
          description: Maximum number of channels to return. Max 200, default 20
          schema:
            type: integer
            format: int32
        - name: status
          in: query
          description: Status filter for draft or approved versions
          schema:
            type: string
            enum:
              - approved
              - draft
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfEmailTemplateResponse'
    post:
      tags:
        - Rest
        - Assets
        - Email
        - Email  Templates
      summary: Create Email Template
      description: 'Creates a new email template. Required Permissions: Read-Write Assets'
      operationId: createEmailTemplateUsingPOST
      requestBody:
        description: createEmailTemplateRequest
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateEmailTemplateRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfEmailTemplateResponse'
      x-codegen-request-body-name: createEmailTemplateRequest
  /rest/asset/v1/emailTemplates/{id}/usedBy.json:
    get:
      tags:
        - Rest
        - Assets
        - Email
        - Templates
        - Used
        - Email  Templates
      summary: Get Email Template Used By
      description: >-
        Returns a list of email records which depend on a given email template.
        Required Permissions: Read-Only Assets, Read-Write Assets
      operationId: getEmailTemplateUsedByUsingGET
      parameters:
        - name: id
          in: path
          description: Id of the email template
          required: true
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: Integer offset for paging
          schema:
            type: integer
            format: int32
        - name: maxReturn
          in: query
          description: Maximum number of channels to return. Max 200, default 20
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfEmailTemplateUsedByResponse'
  /rest/asset/v1/emails.json:
    get:
      tags:
        - Rest
        - Assets
        - Emails
      summary: Get Emails
      description: >-
        Returns a list of emails matching the given filter parameters. Required
        Permissions: Read-Only Assets, Read-Write Assets
      operationId: getEmailUsingGET
      parameters:
        - name: status
          in: query
          description: Status filter for draft or approved versions
          schema:
            type: string
            enum:
              - approved
              - draft
        - name: folder
          in: query
          description: >-
            JSON representation of parent folder, with members 'id', and 'type'
            which may be 'Folder' or 'Program'
          schema:
            type: string
        - name: offset
          in: query
          description: Integer offset for paging
          schema:
            type: integer
            format: int32
        - name: maxReturn
          in: query
          description: Maximum number of emails to return. Max 200, default 20
          schema:
            type: integer
            format: int32
        - name: earliestUpdatedAt
          in: query
          description: >-
            Exclude emails prior to this date. Must be valid ISO-8601 string.
            See <a
            href="http://developers.marketo.com/rest-api/lead-database/fields/field-types/">Datetime</a>
            field type description.
          schema:
            type: string
        - name: latestUpdatedAt
          in: query
          description: >-
            Exclude emails after this date. Must be valid ISO-8601 string. See
            <a
            href="http://developers.marketo.com/rest-api/lead-database/fields/field-types/">Datetime</a>
            field type description.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfEmailResponse'
    post:
      tags:
        - Rest
        - Assets
        - Emails
      summary: Create Email
      description: 'Creates a new email asset. Required Permissions: Read-Write Assets'
      operationId: createEmailUsingPOST
      requestBody:
        description: createEmailRequest
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CreateEmailRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfEmailResponse'
      x-codegen-request-body-name: createEmailRequest
  /rest/asset/v1/email/{id}/fullContent.json:
    get:
      tags:
        - Rest
        - Assets
        - Email
        - Full
        - Emails
      summary: Get Email Full Content
      description: >-
        Returns the serialized HTML version of the email. Required Permissions:
        Read-Only Assets, Read-Write Assets. If leadId is passed in the request:
        Read-Only Lead, Read-Write Lead.
      operationId: getEmailFullContentUsingGET
      parameters:
        - name: id
          in: path
          description: Id of the email
          required: true
          schema:
            type: integer
            format: int32
        - name: status
          in: query
          description: >-
            Status filter for draft or approved versions. Defaults to approved
            if asset is approved, draft if not.
          schema:
            type: string
            enum:
              - approved
              - draft
        - name: leadId
          in: query
          description: >-
            The lead id to impersonate. Email is rendered as though it was
            received by this lead.
          schema:
            type: integer
            format: int32
        - name: type
          in: query
          description: Email content type to return. Default is HTML.
          schema:
            type: string
            enum:
              - Text
              - HTML
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfGetEmailFullContentResponse'
    post:
      tags:
        - Rest
        - Assets
        - Email
        - Full
        - Emails
      summary: Update Email Full Content
      description: >-
        Replaces the HTML of an Email that has had its relationship broken from
        its template. Required Permissions: Read-Write Assets
      operationId: createEmailFullContentUsingPOST
      parameters:
        - name: id
          in: path
          description: Id of the email
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: Content is multipart file parameter
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateEmailFullContentRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfUpdateEmailFullContentResponse'
      x-codegen-request-body-name: updateEmailFullContentRequest
  /rest/asset/v1/file/byName.json:
    get:
      tags:
        - Rest
        - Assets
        - File
        - Files
      summary: Get File by Name
      description: >-
        Returns files records for the given name. Required Permissions:
        Read-Only Assets, Read-Write Assets
      operationId: getFileByNameUsingGET
      parameters:
        - name: name
          in: query
          description: Name of the file
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfFileResponse'
  /rest/asset/v1/file/{id}.json:
    get:
      tags:
        - Rest
        - Assets
        - File
        - Files
      summary: Get File by Id
      description: >-
        Returns the file record for the given id. Required Permissions:
        Read-Only Assets, Read-Write Assets
      operationId: getFileByIdUsingGET
      parameters:
        - name: id
          in: path
          description: Id for file in database
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfFileResponse'
  /rest/asset/v1/file/{id}/content.json:
    post:
      tags:
        - Rest
        - Assets
        - File
        - File  Contents
      summary: Update File Content
      description: >-
        Replaces the current content of the file with the included payload.
        Required Permissions: Read-Write Assets
      operationId: updateContentUsingPOST
      parameters:
        - name: id
          in: path
          description: Id for file in database
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: request
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateFileContentRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfFileResponse'
      x-codegen-request-body-name: request
  /rest/asset/v1/files.json:
    get:
      tags:
        - Rest
        - Assets
        - Files
      summary: Get Files
      description: >-
        Returns the files from the given folder. Required Permissions: Read-Only
        Assets, Read-Write Assets
      operationId: getFilesUsingGET
      parameters:
        - name: folder
          in: query
          description: >-
            JSON representation of parent folder, with members 'id', and 'type'
            which may be 'Folder' or 'Program'
          schema:
            type: string
        - name: offset
          in: query
          description: Integer offset for paging. Default 0
          schema:
            type: integer
            format: int32
        - name: maxReturn
          in: query
          description: Maximum number of files to return. Max 200, default 20
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfFileResponse'
    post:
      tags:
        - Rest
        - Assets
        - Files
      summary: Create File
      description: >-
        Creates a new file from the included payload. Required Permissions:
        Read-Write Assets
      operationId: createFileUsingPOST
      requestBody:
        description: createFileRequest
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateFileRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfFileResponse'
      x-codegen-request-body-name: createFileRequest
  /rest/asset/v1/folder/byName.json:
    get:
      tags:
        - Rest
        - Assets
        - Folder
        - Folders
      summary: Get Folder by Name
      description: >-
        Returns a folder record for the given name. Required Permissions:
        Read-Only Assets, Read-Write Assets
      operationId: getFolderByNameUsingGET
      parameters:
        - name: name
          in: query
          description: Name of the folder. Not applicable for Programs
          required: true
          schema:
            type: string
        - name: type
          in: query
          description: Type of folder. 'Folder' or 'Program'
          schema:
            type: string
        - name: root
          in: query
          description: Parent folder reference
          schema:
            type: string
        - name: workSpace
          in: query
          description: Name of the workspace
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfFolderResponse'
  /rest/asset/v1/folder/{id}.json:
    get:
      tags:
        - Rest
        - Assets
        - Folder
        - Folders
      summary: Get Folder by Id
      description: >-
        Returns the folder record with the given id. Required Permissions:
        Read-Only Assets, Read-Write Assets
      operationId: getFolderByIdUsingGET
      parameters:
        - name: id
          in: path
          description: Id of the folder to retrieve
          required: true
          schema:
            type: integer
            format: int32
        - name: type
          in: query
          description: Type of folder. 'Folder' or 'Program'
          required: true
          schema:
            type: string
            default: Folder
            enum:
              - Folder
              - Program
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfFolderResponse'
    post:
      tags:
        - Rest
        - Assets
        - Folder
        - Folders
      summary: Update Folder Metadata
      description: >-
        Updates the metadata for a given folder. Required Permissions:
        Read-Write Assets
      operationId: updateFolderUsingPOST
      parameters:
        - name: id
          in: path
          description: Id of the folder to update
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: updateFolderRequest
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UpdateFolderRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfFolderResponse'
      x-codegen-request-body-name: updateFolderRequest
  /rest/asset/v1/folder/{id}/content.json:
    get:
      tags:
        - Rest
        - Assets
        - Folder
        - Folders
      summary: Get Folder Contents
      description: >-
        Returns records for the contents of a given folder. Required
        Permissions: Read-Only Assets, Read-Write Assets
      operationId: getFolderContentUsingGET
      parameters:
        - name: id
          in: path
          description: Id of the folder to retrieve
          required: true
          schema:
            type: integer
            format: int32
        - name: maxReturn
          in: query
          description: Maximum number of channels to return. Max 200, default 20
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: Integer offset for paging
          schema:
            type: integer
            format: int32
        - name: type
          in: query
          description: Type of folder. 'Folder' or 'Program'. Default is 'Folder'
          required: true
          schema:
            type: string
            enum:
              - Folder
              - Program
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfFolderContentResponse'
  /rest/asset/v1/folder/{id}/delete.json:
    post:
      tags:
        - Rest
        - Assets
        - Folder
        - Folders
      summary: Delete Folder
      description: >-
        Deletes the designated folder. Deletion will fail if the folder has
        content. Required Permissions: Read-Write Assets
      operationId: deleteFolderUsingPOST
      parameters:
        - name: id
          in: path
          description: Id of the folder to delete
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - type
              type: object
              properties:
                type:
                  type: string
                  description: type
                  default: Folder
                  enum:
                    - Program
                    - Folder
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfIdResponse'
  /rest/asset/v1/folder/{id}/tokens.json:
    get:
      tags:
        - Rest
        - Assets
        - Folder
        - Tokens
      summary: Get Tokens by Folder Id
      description: >-
        Retrieves the list of available My Tokens in the target folder. Required
        Permissions: Read-Only Assets, Read-Write Assets
      operationId: getTokensByFolderIdUsingGET
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
        - name: folderType
          in: query
          description: Type of folder. 'Folder' or 'Program'
          schema:
            type: string
            default: Folder
            enum:
              - Folder
              - Program
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfTokenResponse'
    post:
      tags:
        - Rest
        - Assets
        - Folder
        - Tokens
      summary: Create Token
      description: >-
        Create or update a token in the parent folder. Required Permissions:
        Read-Write Assets
      operationId: addTokenTOFolderUsingPOST
      parameters:
        - name: id
          in: path
          description: Id of the folder to which the token will be associated with
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: createTokenRequest
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CreateTokenRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfTokenResponse'
      x-codegen-request-body-name: createTokenRequest
  /rest/asset/v1/folder/{id}/tokens/delete.json:
    post:
      tags:
        - Rest
        - Assets
        - Folder
        - Tokens
      summary: Delete Token by Name
      description: >-
        Deletes a token with the given name from the parent folder. Required
        Permissions: Read-Write Assets
      operationId: deleteTokenByNameUsingPOST
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: deleteTokenRequest
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/DeleteTokenRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfIdResponse'
      x-codegen-request-body-name: deleteTokenRequest
  /rest/asset/v1/folders.json:
    get:
      tags:
        - Rest
        - Assets
        - Folders
      summary: Get Folders
      description: >-
        Retrieves child folders from within a given root folder. Required
        Permissions: Read-Only Assets, Read-Write Assets
      operationId: getFolderUsingGET
      parameters:
        - name: root
          in: query
          description: Parent folder reference
          schema:
            type: string
        - name: maxDepth
          in: query
          description: Maximum folder depth to traverse, Default 2
          schema:
            type: integer
            format: int32
        - name: maxReturn
          in: query
          description: Maximum number of folders to return. Default 20, maximum 200
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: Integer offset for paging. Default 0
          schema:
            type: integer
            format: int32
        - name: workSpace
          in: query
          description: Name of the workspace
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfFolderResponse'
    post:
      tags:
        - Rest
        - Assets
        - Folders
      summary: Create Folder
      description: 'Creates a new folder. Required Permissions: Read-Write Assets'
      operationId: createFolderUsingPOST
      requestBody:
        description: createFolderRequest
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CreateFolderRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfFolderResponse'
      x-codegen-request-body-name: createFolderRequest
  /rest/asset/v1/form/byName.json:
    get:
      tags:
        - Rest
        - Assets
        - Form
        - Forms
      summary: Get Form by Name
      description: >-
        Retrieves a form record by its name. Required Permissions: Read-Only
        Assets, Read-Write Assets
      operationId: getLpFormByNameUsingGET
      parameters:
        - name: name
          in: query
          description: Name of the form
          required: true
          schema:
            type: string
        - name: status
          in: query
          description: Status filter for draft or approved versions
          schema:
            type: string
            enum:
              - approved
              - draft
        - name: folder
          in: query
          description: >-
            JSON representation of parent folder, with members 'id', and 'type'
            which may be 'Folder' or 'Program'
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfLpFormResponse'
  /rest/asset/v1/form/fields.json:
    get:
      tags:
        - Rest
        - Assets
        - Form
        - Form  Fields
      summary: Get Available Form Fields
      description: >-
        Retrieves a list of all valid fields for use in forms. Required
        Permissions: Read-Only Assets, Read-Write Assets
      operationId: getAllFieldsUsingGET
      parameters:
        - name: maxReturn
          in: query
          description: Maximum number of fields to return. Max 200, default 20
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: Integer offset for paging
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfFieldsMetaDataResponse'
  /rest/asset/v1/form/programMemberFields.json:
    get:
      tags:
        - Rest
        - Assets
        - Form
        - Program
        - Member
        - Form  Fields
      summary: Get Available Form Program Member Fields
      description: >-
        Retrieves a list of all valid Program Member fields for use in forms.
        Required Permissions: Read-Only Assets, Read-Write Assets
      operationId: getAllProgramMemberFieldsUsingGET
      parameters:
        - name: maxReturn
          in: query
          description: Maximum number of fields to return. Max 200, default 20
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: Integer offset for paging
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfFieldsMetaDataResponse'
  /rest/asset/v1/form/{formId}/field/{fieldId}/visibility.json:
    post:
      tags:
        - Rest
        - Assets
        - Form
        - Forms
        - Field
        - Fields
        - Form  Fields
      summary: Add Form Field Visibility Rules
      description: >-
        Adds a visibility rule to the target form field. Required Permissions:
        Read-Write Assets
      operationId: addFormFieldVisibilityRuleUsingPOST
      parameters:
        - name: formId
          in: path
          description: formId
          required: true
          schema:
            type: integer
            format: int32
        - name: fieldId
          in: path
          description: fieldId
          required: true
          schema:
            type: string
      requestBody:
        description: addFormFieldVisibilityRequest
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AddFormFieldVisibilityRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfFormVisibilityRuleResponse'
      x-codegen-request-body-name: addFormFieldVisibilityRequest
  /rest/asset/v1/form/{id}.json:
    get:
      tags:
        - Rest
        - Assets
        - Form
        - Forms
      summary: Get Form By Id
      description: >-
        Retrieves a form record by its id. Required Permissions: Read-Only
        Assets, Read-Write Assets
      operationId: getLpFormByIdUsingGET
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
        - name: status
          in: query
          description: Status filter for draft or approved versions
          schema:
            type: string
            enum:
              - approved
              - draft
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfLpFormResponse'
    post:
      tags:
        - Rest
        - Assets
        - Form
        - Forms
      summary: Update Form Metadata
      description: >-
        Updates the metadata of the target form. Required Permissions:
        Read-Write Assets
      operationId: updateFormsUsingPOST
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: updateFormMetaDataRequest
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UpdateFormMetaDataRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfLpFormResponse'
      x-codegen-request-body-name: updateFormMetaDataRequest
  /rest/asset/v1/form/{id}/approveDraft.json:
    post:
      tags:
        - Rest
        - Assets
        - Form
        - Approve
        - Forms
      summary: Approve Form Draft
      description: >-
        Approves the current draft of the form. This will delete the current
        approved version of the form. Required Permissions: Approve Assets
      operationId: approveFromUsingPOST
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfLpFormResponse'
  /rest/asset/v1/form/{id}/clone.json:
    post:
      tags:
        - Rest
        - Assets
        - Form
        - Forms
      summary: Clone Form
      description: 'Clones the target form. Required Permissions: Read-Write Assets'
      operationId: cloneLpFormsUsingPOST
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: cloneFormRequest
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CloneFormRequest'
        required: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfLpFormResponse'
      x-codegen-request-body-name: cloneFormRequest
  /rest/asset/v1/form/{id}/delete.json:
    post:
      tags:
        - Rest
        - Assets
        - Form
        - Forms
      summary: Delete Form
      description: >-
        Deletes the target form. Forms which are in use by landing pages may not
        be deleted until they are removed from all landing pages. Required
        Permissions: Read-Write Assets
      operationId: deleteFormByIdUsingPOST
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfIdResponse'
  /rest/asset/v1/form/{id}/discardDraft.json:
    post:
      tags:
        - Rest
        - Assets
        - Form
        - Discard
        - Forms
      summary: Discard Form Draft
      description: >-
        Discards the current draft of the form. Required Permissions: Read-Write
        Assets
      operationId: discardFormByIdUsingPOST
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfIdResponse'
  /rest/asset/v1/form/{id}/field/{fieldId}.json:
    post:
      tags:
        - Rest
        - Assets
        - Form
        - Field
        - Fields
        - Form  Fields
      summary: Update Form Field
      description: >-
        Updates the configuration for that target field. Required Permissions:
        Read-Write Assets
      operationId: updateFormFieldUsingPOST
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
        - name: fieldId
          in: path
          description: fieldId
          required: true
          schema:
            type: string
      requestBody:
        description: updateFormFieldRequest
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UpdateFormFieldRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfLpFormFieldResponse'
      x-codegen-request-body-name: updateFormFieldRequest
  /rest/asset/v1/form/{id}/field/{fieldId}/delete.json:
    post:
      tags:
        - Rest
        - Assets
        - Form
        - Field
        - Fields
        - Form  Fields
      summary: Delete Form Field
      description: 'Deletes a field from a form. Required Permissions: Read-Write Assets'
      operationId: deleteFormFieldUsingPOST
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
        - name: fieldId
          in: path
          description: fieldId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfIdResponse'
  /rest/asset/v1/form/{id}/fieldSet.json:
    post:
      tags:
        - Rest
        - Assets
        - Form
        - Field
        - Form  Fields
      summary: Add Fieldset to Form
      description: >-
        Adds a field set to the target form. Required Permissions: Read-Write
        Assets
      operationId: addFieldSetUsingPOST
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: addFormFieldSetRequest
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AddFormFieldSetRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfLpFormFieldResponse'
      x-codegen-request-body-name: addFormFieldSetRequest
  /rest/asset/v1/form/{id}/fieldSet/{fieldSetId}/field/{fieldId}/delete.json:
    post:
      tags:
        - Rest
        - Assets
        - Form
        - Field
        - Set
        - Fields
        - Form  Fields
      summary: Delete Field from Fieldset
      description: >-
        Removes the target field from the fieldset. Required Permissions:
        Read-Write Assets
      operationId: deleteFormFieldFromFieldSetUsingPOST
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
        - name: fieldSetId
          in: path
          description: fieldSetId
          required: true
          schema:
            type: string
        - name: fieldId
          in: path
          description: fieldId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfIdResponse'
  /rest/asset/v1/form/{id}/fields.json:
    get:
      tags:
        - Rest
        - Assets
        - Form
        - Form  Fields
      summary: Get Fields for Form
      description: >-
        Retrieves the list of fields in the target form. Required Permissions:
        Read-Only Assets, Read-Write Assets
      operationId: getFormFieldByFormVidUsingGET
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
        - name: status
          in: query
          description: Status filter for draft or approved versions
          schema:
            type: string
            enum:
              - approved
              - draft
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfLpFormFieldResponse'
    post:
      tags:
        - Rest
        - Assets
        - Form
        - Form  Fields
      summary: Add Field to Form
      description: 'Adds a field to a form. Required Permissions: Read-Write Assets'
      operationId: addFieldToAFormUsingPOST
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: addFormFieldSetRequest
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AddFormFieldRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfLpFormFieldResponse'
      x-codegen-request-body-name: addFormFieldSetRequest
  /rest/asset/v1/form/{id}/reArrange.json:
    post:
      tags:
        - Rest
        - Assets
        - Form
        - Form  Fields
      summary: Update Field Positions
      description: >-
        Reorders the list of fields in a form. Required Permissions: Read-Write
        Assets
      operationId: updateFieldPositionsUsingPOST
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: reArrangeRequest
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ReArrangeRequest'
        required: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfIdResponse'
      x-codegen-request-body-name: reArrangeRequest
  /rest/asset/v1/form/{id}/richText.json:
    post:
      tags:
        - Rest
        - Assets
        - Form
        - Text.json
      summary: Add Rich Text Field
      description: >-
        Adds a rich-text type field to the form. Required Permissions:
        Read-Write Assets
      operationId: addRichTextFieldUsingPOST
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: addRichTextRequest
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AddRichTextRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfLpFormFieldResponse'
      x-codegen-request-body-name: addRichTextRequest
  /rest/asset/v1/form/{id}/submitButton.json:
    post:
      tags:
        - Rest
        - Assets
        - Form
        - Submit
        - Forms
      summary: Update Submit Button
      description: >-
        Updates the submit button configuration for the target form. Required
        Permissions: Read-Write Assets
      operationId: updateFormSubmitButtonUsingPOST
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: submitButtonRequest
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SubmitButtonRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfLpFormResponse'
      x-codegen-request-body-name: submitButtonRequest
  /rest/asset/v1/form/{id}/thankYouPage.json:
    get:
      tags:
        - Rest
        - Assets
        - Form
        - Thank
        - Forms
      summary: Get Thank You Page by Form Id
      description: >-
        Returns the thank you page configuration for a given form. Required
        Permissions: Read-Only Assets, Read-Write Assets
      operationId: getThankYouPageByIdUsingGET
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
        - name: status
          in: query
          description: Status filter for draft or approved versions
          schema:
            type: string
            enum:
              - approved
              - draft
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfThankYouPageResponse'
    post:
      tags:
        - Rest
        - Assets
        - Form
        - Thank
        - Forms
      summary: Update Thank You Page
      description: >-
        Updates the thank you page configuration for a given form. This update
        is destructive and the resulting draft will not have any memory of the
        previous configuration. Required Permissions: Read-Only Assets,
        Read-Write Assets
      operationId: updateThankYouPageByIdUsingPOST
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: thankYouPageRequest
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UpdateThankYouPageRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfThankYouPageResponse'
      x-codegen-request-body-name: thankYouPageRequest
  /rest/asset/v1/forms.json:
    get:
      tags:
        - Rest
        - Assets
        - Forms
      summary: Get Forms
      description: >-
        Retrieves a list of accessible form records from the target instance.
        Required Permissions: Read-Only Assets, Read-Write Assets
      operationId: browseForms2UsingGET
      parameters:
        - name: status
          in: query
          description: Status filter for draft or approved versions
          schema:
            type: string
            enum:
              - approved
              - draft
        - name: folder
          in: query
          description: >-
            JSON representation of parent folder, with members 'id', and 'type'
            which may be 'Folder' or 'Program'
          required: true
          schema:
            type: string
        - name: maxReturn
          in: query
          description: Maximum number of channels to return. Max 200, default 20
          schema:
            type: string
        - name: offset
          in: query
          description: Integer offset for paging
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfLpFormResponse'
    post:
      tags:
        - Rest
        - Assets
        - Forms
      summary: Create Form
      description: 'Creates a new form. Required Permissions: Read-Write Assets'
      operationId: createLpFormsUsingPOST
      requestBody:
        description: createFormRequest
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CreateLpFormRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfLpFormResponse'
      x-codegen-request-body-name: createFormRequest
  /rest/asset/v1/form/{id}/usedBy.json:
    get:
      tags:
        - Rest
        - Assets
        - Form
        - Used
        - Forms
      summary: Get Form Used By
      description: >-
        Returns a list of asset records which depend on a given form. Required
        Permissions: Read-Only Assets, Read-Write Assets
      operationId: getFormUsedByUsingGET
      parameters:
        - name: id
          in: path
          description: Id of the form
          required: true
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: Integer offset for paging
          schema:
            type: integer
            format: int32
        - name: maxReturn
          in: query
          description: Maximum number of assets to return. Max 200, default 20
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfFormUsedByResponse'
  /rest/asset/v1/landingPage/byName.json:
    get:
      tags:
        - Rest
        - Assets
        - Landing
        - Page
        - Landing  Pages
      summary: Get Landing Page by Name
      description: >-
        Returns the landing page record for the given name. Required
        Permissions: Read-Only Assets, Read-Write Assets
      operationId: getLandingPageByNameUsingGET
      parameters:
        - name: name
          in: query
          description: Name of the landing page
          required: true
          schema:
            type: string
        - name: status
          in: query
          description: Status filter for draft or approved versions
          schema:
            type: string
            enum:
              - approved
              - draft
        - name: maxReturn
          in: query
          description: Maximum number of channels to return. Max 200, default 20
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: Integer offset for paging
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfLandingPageResponse'
  /rest/asset/v1/landingPage/{id}.json:
    get:
      tags:
        - Rest
        - Assets
        - Landing
        - Page
        - Landing  Pages
      summary: Get Landing Page by Id
      description: >-
        Returns the landing record for the given id. Required Permissions:
        Read-Only Assets, Read-Write Assets
      operationId: getLandingPageByIdUsingGET
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
        - name: status
          in: query
          description: Status filter for draft or approved versions
          schema:
            type: string
            enum:
              - approved
              - draft
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfLandingPageResponse'
    post:
      tags:
        - Rest
        - Assets
        - Landing
        - Page
        - Landing  Pages
      summary: Update Landing Page Metadata
      description: >-
        Updates the metadata for the targe landing page. Required Permissions:
        Read-Write Assets
      operationId: updateLandingPageUsingPOST
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: updateLandingPageRequest
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UpdateLandingPageRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfLandingPageResponse'
      x-codegen-request-body-name: updateLandingPageRequest
  /rest/asset/v1/landingPage/{id}/approveDraft.json:
    post:
      tags:
        - Rest
        - Assets
        - Landing
        - Page
        - Approve
        - Landing  Pages
      summary: Approve Landing Page Draft
      description: >-
        Approves the current draft of the landing page. Required Permissions:
        Approve Assets
      operationId: approveLandingPageUsingPOST
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfIdResponse'
  /rest/asset/v1/landingPage/{id}/clone.json:
    post:
      tags:
        - Rest
        - Assets
        - Landing
        - Page
        - Landing  Pages
      summary: Clone Landing Page
      description: 'Clones the target landing page. Required Permissions: Read-Write Assets'
      operationId: cloneLandingPageUsingPOST
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: cloneLandingPageRequest
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CloneLandingPageRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfLandingPageResponse'
      x-codegen-request-body-name: cloneLandingPageRequest
  /rest/asset/v1/landingPage/{id}/content.json:
    get:
      tags:
        - Rest
        - Assets
        - Landing
        - Page
        - Landing  Page  Content
      summary: Get Landing Page Content
      description: >-
        Retrieves the list of content sections in the target landing page.
        Required Permissions: Read-Only Assets, Read-Write Assets
      operationId: getLandingPageContentUsingGET
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
        - name: status
          in: query
          description: Status filter for draft or approved versions
          schema:
            type: string
            enum:
              - approved
              - draft
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfLandingPageContentResponse'
    post:
      tags:
        - Rest
        - Assets
        - Landing
        - Page
        - Landing  Page  Content
      summary: Add Landing Page Content Section
      description: >-
        Adds a content section to the target landing page. Parameters must be
        sent as application/x-www-form-urlencoded (not JSON). Required
        Permissions: Read-Write Assets
      operationId: addLandingPageContentUsingPOST
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: request
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CreateLandingPageContentRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfIdResponse'
      x-codegen-request-body-name: request
  /rest/asset/v1/landingPage/{id}/content/{contentId}.json:
    post:
      tags:
        - Rest
        - Assets
        - Landing
        - Page
        - Content
        - Landing  Page  Content
      summary: Update Landing Page Content Section
      description: >-
        Updates a content section the landing page. Parameters must be sent as
        application/x-www-form-urlencoded (not JSON). Required Permissions:
        Read-Write Assets
      operationId: updateLandingPageContentUsingPOST
      parameters:
        - name: id
          in: path
          description: Id of landing page
          required: true
          schema:
            type: integer
            format: int32
        - name: contentId
          in: path
          description: Id of landing page content section
          required: true
          schema:
            type: string
      requestBody:
        description: Content properties
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UpdateLandingPageContentRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfIdResponse'
      x-codegen-request-body-name: request
  /rest/asset/v1/landingPage/{id}/content/{contentId}/delete.json:
    post:
      tags:
        - Rest
        - Assets
        - Landing
        - Page
        - Content
        - Landing  Page  Content
      summary: Delete Landing Page Content Section
      description: >-
        Removes the target content section from the parent landing page.
        Required Permissions: Read-Write Assets
      operationId: removeLandingPageContentUsingPOST
      parameters:
        - name: id
          in: path
          description: Id of landing page
          required: true
          schema:
            type: integer
            format: int32
        - name: contentId
          in: path
          description: Id of landing page content section
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfIdResponse'
  /rest/asset/v1/landingPage/{id}/delete.json:
    post:
      tags:
        - Rest
        - Assets
        - Landing
        - Page
        - Landing  Pages
      summary: Delete Landing Page
      description: 'Deletes the target landing page. Required Permissions: Read-Write Assets'
      operationId: deleteLandingPageByIdUsingPOST
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfIdResponse'
  /rest/asset/v1/landingPage/{id}/discardDraft.json:
    post:
      tags:
        - Rest
        - Assets
        - Landing
        - Page
        - Discard
        - Landing  Pages
      summary: Discard Landing Page Draft
      description: >-
        Discards the current draft of the landing page. Required Permissions:
        Read-Write Assets
      operationId: discardLandingPageByIdUsingPOST
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfIdResponse'
  /rest/asset/v1/landingPage/{id}/dynamicContent/{contentId}.json:
    get:
      tags:
        - Rest
        - Assets
        - Landing
        - Page
        - Dynamic
        - Content
        - Landing  Page  Content
      summary: Get Landing Page Dynamic Content
      description: >-
        Retrieves the dynamic content from the target section. Required
        Permissions: Read-Only Assets, Read-Write Assets
      operationId: getLandingPageDynamicContentsUsingGET
      parameters:
        - name: id
          in: path
          description: Id of landing page
          required: true
          schema:
            type: integer
            format: int32
        - name: contentId
          in: path
          description: Id of landing page dynamic content section
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/ResponseOfLandingPageDynamicContentResponse
    post:
      tags:
        - Rest
        - Assets
        - Landing
        - Page
        - Dynamic
        - Content
        - Landing  Page  Content
      summary: Update Landing Page Dynamic Content Section
      description: >-
        Updates the content of the target dynamic content section. Required
        Permissions: Read-Write Assets
      operationId: updateLandingPageDynamicContentUsingPOST
      parameters:
        - name: id
          in: path
          description: Id of the landing page
          required: true
          schema:
            type: integer
            format: int32
        - name: contentId
          in: path
          description: Id of the landing page dynamic content
          required: true
          schema:
            type: string
      requestBody:
        description: Dynamic content properties
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UpdateLandingPageDynamicContentRequest'
        required: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfIdResponse'
      x-codegen-request-body-name: request
  /rest/asset/v1/landingPage/{id}/unapprove.json:
    post:
      tags:
        - Rest
        - Assets
        - Landing
        - Page
        - Landing  Pages
      summary: Unapprove Landing Page
      description: >-
        Unapproves the landing page, reverting it to a draft-only state.
        Required Permissions: Approve Assets
      operationId: unapproveLandingPageByIdUsingPOST
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfLandingPageResponse'
  /rest/asset/v1/landingPage/{id}/variable/{variableId}.json:
    post:
      tags:
        - Rest
        - Assets
        - Landing
        - Page
        - Variable
        - Variables
        - Landing  Pages
      summary: Update Landing Page Variable
      description: >-
        Updates the value of the given variable. Required Permissions:
        Read-Write Assets
      operationId: updateLandingPageVariableUsingPOST
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
        - name: variableId
          in: path
          description: variableId
          required: true
          schema:
            type: string
        - name: value
          in: query
          description: New value of the variable
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfLandingPageVariableResponse'
  /rest/asset/v1/landingPage/{id}/variables.json:
    get:
      tags:
        - Rest
        - Assets
        - Landing
        - Page
        - Landing  Pages
      summary: Get Landing Page Variables
      operationId: getVariablesUsingGET
      parameters:
        - name: id
          in: path
          description: Id of the landing page
          required: true
          schema:
            type: integer
            format: int32
        - name: status
          in: query
          description: Status filter for draft or approved versions
          schema:
            type: string
            enum:
              - approved
              - draft
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfLandingPageVariableResponse'
  /rest/asset/v1/landingPageTemplate/byName.json:
    get:
      tags:
        - Rest
        - Assets
        - Landing
        - Page
        - Template
        - Landing  Page  Templates
      summary: Get Landing Page Template by Name
      description: >-
        Retrieves the landing page template record for the given name. Required
        Permissions: Read-Only Assets, Read-Write Assets
      operationId: getLandingPageTemplateByNameUsingGET
      parameters:
        - name: name
          in: query
          description: Name of the landing page template
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfLpTemplateResponse'
  /rest/asset/v1/landingPageTemplate/{id}.json:
    get:
      tags:
        - Rest
        - Assets
        - Landing
        - Page
        - Template
        - Landing  Page  Templates
      summary: Get Landing Page Template by Id
      description: >-
        Retrieves the record for the target landing page template. Required
        Permissions: Read-Only Assets, Read-Write Assets
      operationId: getLandingPageTemplateByIdUsingGET
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
        - name: status
          in: query
          description: Status filter for draft or approved versions
          schema:
            type: string
            enum:
              - approved
              - draft
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfLpTemplateResponse'
    post:
      tags:
        - Rest
        - Assets
        - Landing
        - Page
        - Template
        - Landing  Page  Templates
      summary: Update Landing Page Template Metadata
      description: >-
        Updates the metadata for the target landing page template. Required
        Permissions: Read-Write Assets
      operationId: updateLpTemplateUsingPOST
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: updateLpTemplateRequest
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UpdateLpTemplateRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfLpTemplateResponse'
      x-codegen-request-body-name: updateLpTemplateRequest
  /rest/asset/v1/landingPageTemplate/{id}/approveDraft.json:
    post:
      tags:
        - Rest
        - Assets
        - Landing
        - Page
        - Template
        - Approve
        - Landing  Page  Templates
      summary: Approve Landing Page Template Draft
      description: >-
        Approves the current landing page template draft. This will delete the
        current approved version of the template if there is one. Required
        Permissions: Approve Assets
      operationId: approveLandingPageTemplateUsingPOST
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfLpTemplateResponse'
  /rest/asset/v1/landingPageTemplate/{id}/clone.json:
    post:
      tags:
        - Rest
        - Assets
        - Landing
        - Page
        - Template
        - Landing  Page  Templates
      summary: Clone Landing Page Template
      description: >-
        Clones the target landing page template. Required Permissions:
        Read-Write Assets
      operationId: cloneLpTemplateUsingPOST
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: cloneLpTemplateRequest
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CloneLpTemplateRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfLpTemplateResponse'
      x-codegen-request-body-name: cloneLpTemplateRequest
  /rest/asset/v1/landingPageTemplate/{id}/content.json:
    get:
      tags:
        - Rest
        - Assets
        - Landing
        - Page
        - Template
        - Landing  Page  Templates
      summary: Get Landing Page Template Content
      description: >-
        Retrieves the content of the target landing page. Required Permissions:
        Read-Only Assets, Read-Write Assets
      operationId: getLandingPageTemplateContentUsingGET
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
        - name: status
          in: query
          description: Status filter for draft or approved versions
          schema:
            type: string
            enum:
              - approved
              - draft
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfLpTemplateGetContentResponse'
    post:
      tags:
        - Rest
        - Assets
        - Landing
        - Page
        - Template
        - Landing  Page  Templates
      summary: Update Landing Page Template Content
      description: >-
        Updates the content for the target landing page template. This update is
        destructive for the draft version of the template. Required Permissions:
        Read-Write Assets
      operationId: updateLandingPageTemplateContentUsingPOST
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
                - content
              type: object
              properties:
                content:
                  type: string
                  description: content
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfIdResponse'
  /rest/asset/v1/landingPageTemplate/{id}/delete.json:
    post:
      tags:
        - Rest
        - Assets
        - Landing
        - Page
        - Template
        - Landing  Page  Templates
      summary: Delete Landing Page Template
      description: >-
        Deletes the target landing page template. Required Permissions:
        Read-Write Assets
      operationId: deleteLpTemplateUsingPOST
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfIdResponse'
  /rest/asset/v1/landingPageTemplate/{id}/discardDraft.json:
    post:
      tags:
        - Rest
        - Assets
        - Landing
        - Page
        - Template
        - Discard
        - Landing  Page  Templates
      summary: Discard Landing Page Template Draft
      description: >-
        Discrads the current draft of the landing page template. Required
        Permissions: Read-Write Assets
      operationId: discardDraftUsingPOST_2
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfIdResponse'
  /rest/asset/v1/landingPageTemplate/{id}/unapprove.json:
    post:
      tags:
        - Rest
        - Assets
        - Landing
        - Page
        - Template
        - Landing  Page  Templates
      summary: Unapprove Landing Page Template
      description: >-
        Unapproves the landing page template and reverts it to a draft-only
        state. Required Permissions: Approve Assets
      operationId: unapproveLandingPageTemplateUsingPOST
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfLpTemplateResponse'
  /rest/asset/v1/landingPageTemplates.json:
    get:
      tags:
        - Rest
        - Assets
        - Landing
        - Page
        - Landing  Page  Templates
      summary: Get Landing Page Templates
      description: >-
        Retrieves the list of accessible landing page templates from the target
        instance. Required Permissions: Read-Only Assets, Read-Write Assets
      operationId: getLandingPageTemplatesUsingGET
      parameters:
        - name: maxReturn
          in: query
          description: Maximum number of channels to return. Max 200, default 20
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: Integer offset for paging
          schema:
            type: integer
            format: int32
        - name: status
          in: query
          description: Status filter for draft or approved versions
          schema:
            type: string
            enum:
              - approved
              - draft
        - name: folder
          in: query
          description: >-
            JSON representation of parent folder, with members 'id', and 'type'
            which may be 'Folder' or 'Program'
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfLpTemplateResponse'
    post:
      tags:
        - Rest
        - Assets
        - Landing
        - Page
        - Landing  Page  Templates
      summary: Create Landing Page Template
      description: >-
        Creates a new landing page template. Required Permissions: Read-Write
        Assets
      operationId: createLpTemplateUsingPOST
      requestBody:
        description: createLpTemplateRequest
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CreateLpTemplateRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfLpTemplateResponse'
      x-codegen-request-body-name: createLpTemplateRequest
  /rest/asset/v1/landingPages.json:
    get:
      tags:
        - Rest
        - Assets
        - Landing
        - Landing  Pages
      summary: Get Landing Pages
      description: >-
        Retrieves a list of accessible landing pages from the target instance.
        Required Permissions: Read-Only Assets, Read-Write Assets
      operationId: browseLandingPagesUsingGET
      parameters:
        - name: status
          in: query
          description: Status filter for draft or approved versions
          schema:
            type: string
            enum:
              - approved
              - draft
        - name: maxReturn
          in: query
          description: Maximum number of landing pages to return. Max 200, default 20
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: Integer offset for paging
          schema:
            type: integer
            format: int32
        - name: folder
          in: query
          description: >-
            JSON representation of parent folder, with members 'id', and 'type'
            which may be 'Folder' or 'Program'
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfLandingPageResponse'
    post:
      tags:
        - Rest
        - Assets
        - Landing
        - Landing  Pages
      summary: Create Landing Page
      description: 'Creates a new landing page. Required Permissions: Read-Write Assets'
      operationId: createLandingPageUsingPOST
      requestBody:
        description: createLandingPageRequest
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CreateLandingPageRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfLandingPageResponse'
      x-codegen-request-body-name: createLandingPageRequest
  /rest/asset/v1/landingPage/{id}/fullContent.json:
    get:
      tags:
        - Rest
        - Assets
        - Landing
        - Page
        - Full
        - Landing  Pages
      summary: Get Landing Page Full Content
      description: >-
        Returns the serialized HTML version of the landing page. Required
        Permissions: Read-Only Assets, Read-Write Assets. If leadId is passed in
        the request: Read-Only Lead, Read-Write Lead.
      operationId: getLandingPageFullContentUsingGET
      parameters:
        - name: id
          in: path
          description: Id of the landing page.
          required: true
          schema:
            type: integer
            format: int32
        - name: leadId
          in: query
          description: >-
            The lead id to impersonate. Landing page is rendered as though it
            was viewed by this lead.
          schema:
            type: integer
            format: int32
        - name: segmentation
          in: query
          description: >-
            JSON array of of segmentations. Each segmentation must be a JSON
            object with members 'segmentationId', and 'segmentId'.<br>Example:
            [{"segmentationId":1030,"segmentId":1103}]
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/ResponseOfGetLandingPageFullContentResponse
  /rest/asset/v1/redirectRules.json:
    get:
      tags:
        - Rest
        - Assets
        - Redirect
        - Landing  Page  Redirect  Rules
      summary: Get Landing Page Redirect Rules
      description: >-
        Retrieves a list of landing page redirect rules from the target
        instance. Required Permissions: Read Only Redirect Rules, Read Write
        Redirect Rules
      operationId: getLandingPageRedirectRulesUsingGET
      parameters:
        - name: maxReturn
          in: query
          description: >-
            Maximum number of landing page redirect rules to return. Max 200,
            default 20
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: Integer offset for paging
          schema:
            type: integer
            format: int32
        - name: redirectTolandingPageId
          in: query
          description: Landing page id of landing page to redirect to
          schema:
            type: string
        - name: redirectToPath
          in: query
          description: Path of landing page to redirect to
          schema:
            type: string
        - name: earliestUpdatedAt
          in: query
          description: >-
            Exclude landing page redirect rules prior to this date. Must be
            valid ISO-8601 string. See <a
            href="http://developers.marketo.com/rest-api/lead-database/fields/field-types/">Datetime</a>
            field type description.
          schema:
            type: string
        - name: latestUpdatedAt
          in: query
          description: >-
            Exclude landing page redirect rules after this date. Must be valid
            ISO-8601 string. See <a
            href="http://developers.marketo.com/rest-api/lead-database/fields/field-types/">Datetime</a>
            field type description.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfLandingPageRedirectRules'
    post:
      tags:
        - Rest
        - Assets
        - Redirect
        - Landing  Page  Redirect  Rules
      summary: Create Landing Page Redirect Rule
      description: >-
        Create a new landing page redirect rule. Required Permissions: Read
        Write Redirect Rules
      operationId: createLandingPageRedirectRuleUsingPOST
      requestBody:
        description: createLandingPageRedirectRuleRequest
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CreateLandingPageRedirectRuleRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfLandingPageRedirectRules'
      x-codegen-request-body-name: createLandingPageRedirectRuleRequest
  /rest/asset/v1/redirectRule/{id}.json:
    get:
      tags:
        - Rest
        - Assets
        - Redirect
        - Rules
        - Landing  Page  Redirect  Rules
      summary: Get Landing Page Redirect Rule by Id
      description: >-
        Retrieves the landing page redirect rule record. Required Permissions:
        Read Only Redirect Rules, Read Write Redirect Rules
      operationId: getLandingPageRedirectRuleByIdUsingGET
      parameters:
        - name: id
          in: path
          description: Id of landing page redirect rule
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfLandingPageRedirectRules'
    post:
      tags:
        - Rest
        - Assets
        - Redirect
        - Rules
        - Landing  Page  Redirect  Rules
      summary: Update Landing Page Redirect Rule
      description: >-
        Update an existing landing page redirect rule. Required Permissions:
        Read Write Redirect Rules
      operationId: updateLandingPageRedirectRuleUsingPOST
      parameters:
        - name: id
          in: path
          description: Id of landing page redirect rule
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: updateLandingPageRedirectRuleRequest
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UpdateLandingPageRedirectRuleRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfLandingPageRedirectRules'
      x-codegen-request-body-name: updateLandingPageRedirectRuleRequest
  /rest/asset/v1/redirectRule/{id}/delete.json:
    post:
      tags:
        - Rest
        - Assets
        - Redirect
        - Rules
        - Landing  Page  Redirect  Rules
      summary: Delete Landing Page Redirect Rule
      description: >-
        Delete a landing page redirect rule. Required Permissions: Read Write
        Redirect Rules
      operationId: deleteLandingPageRedirectRuleUsingPOST
      parameters:
        - name: id
          in: path
          description: Id of landing page redirect rule
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfIdResponse'
  /rest/asset/v1/landingPageDomains.json:
    get:
      tags:
        - Rest
        - Assets
        - Landing
        - Page
        - Landing  Page  Redirect  Rules
      summary: Get Landing Page Domains
      description: >-
        Retrieves a list of landing page domain and domain aliases. Required
        Permissions: Read Only Redirect Rules, Read Write Redirect Rules
      operationId: getLandingPageDomainsUsingGET
      parameters:
        - name: maxReturn
          in: query
          description: >-
            Maximum number of landing page domains and domain aliases to return.
            Max 200, default 20
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: Integer offset for paging
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfLandingPageDomains'
  /rest/asset/v1/program/byName.json:
    get:
      tags:
        - Rest
        - Assets
        - Program
        - Programs
      summary: Get Program by Name
      description: >-
        Retrieves the program record for the given name. Required Permissions:
        Read-Only Assets, Read-Write Assets
      operationId: getProgramByNameUsingGET
      parameters:
        - name: name
          in: query
          description: Name of the program
          required: true
          schema:
            type: string
        - name: includeTags
          in: query
          description: Set true to populate program tags
          schema:
            type: boolean
        - name: includeCosts
          in: query
          description: Set true to populate program costs
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfProgramResponse'
  /rest/asset/v1/program/byTag.json:
    get:
      tags:
        - Rest
        - Assets
        - Program
        - Programs
      summary: Get Programs by Tag
      description: >-
        Retrieves a list of programs matching the tag type and tag values given.
        Required Permissions: Read-Only Assets, Read-Write Assets
      operationId: getProgramListByTagUsingGET
      parameters:
        - name: tagType
          in: query
          description: Type of program tag
          required: true
          schema:
            type: string
        - name: tagValue
          in: query
          description: Value of the tag
          required: true
          schema:
            type: string
        - name: maxReturn
          in: query
          description: Maximum number of channels to return. Max 200, default 20
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: Integer offset for paging
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfProgramResponse'
  /rest/asset/v1/program/{id}.json:
    get:
      tags:
        - Rest
        - Assets
        - Program
        - Programs
      summary: Get Program by Id
      description: >-
        Retrieves the program record for the given id. Required Permissions:
        Read-Only Assets, Read-Write Assets
      operationId: getProgramByIdUsingGET
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfProgramResponse'
    post:
      tags:
        - Rest
        - Assets
        - Program
        - Programs
      summary: Update Program Metadata
      description: >-
        Updates the target program's metadata. Required Permissions: Read-Write
        Assets
      operationId: updateProgramUsingPOST
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: updateProgramRequest
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UpdateProgramRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfProgramResponse'
      x-codegen-request-body-name: updateProgramRequest
  /rest/asset/v1/program/{programId}/smartList.json:
    get:
      tags:
        - Rest
        - Assets
        - Program
        - Programs
      summary: Get Smart List by Program Id
      description: >-
        Retrieves a Smart List record by its Email Program id. Required
        Permissions: Read-Asset or Read-Write Asset
      operationId: getSmartListByProgramIdUsingGET
      parameters:
        - name: programId
          in: path
          description: Id for the email program containing smart list to retrieve
          required: true
          schema:
            type: integer
            format: int64
        - name: includeRules
          in: query
          description: Set true to populate smart list rules. Default false
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfSmartListResponseWithRules'
  /rest/asset/v1/program/{id}/approve.json:
    post:
      tags:
        - Rest
        - Assets
        - Program
        - Programs
      summary: Approve Program
      description: >-
        Approves the target program. Only valid for unapproved email programs.
        Required Permissions: Read-Write Assets
      operationId: approveProgramUsingPOST
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfIdResponse'
  /rest/asset/v1/program/{id}/clone.json:
    post:
      tags:
        - Rest
        - Assets
        - Program
        - Programs
      summary: Clone Program
      description: 'Clones the target program. Required Permissions: Read-Write Assets'
      operationId: cloneProgramUsingPOST
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: cloneProgramRequest
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CloneProgramRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfProgramResponse'
      x-codegen-request-body-name: cloneProgramRequest
  /rest/asset/v1/program/{id}/delete.json:
    post:
      tags:
        - Rest
        - Assets
        - Program
        - Programs
      summary: Delete Program
      description: >-
        Deletes the target program. The program may not contain any assets which
        are in use outside the program. Required Permissions: Read-Write Assets
      operationId: deleteProgramUsingPOST
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfIdResponse'
  /rest/asset/v1/program/{id}/unapprove.json:
    post:
      tags:
        - Rest
        - Assets
        - Program
        - Programs
      summary: Unapprove Program
      description: >-
        Unapproves the target program. Only valid for approved email programs.
        Required Permissions: Read-Write Assets
      operationId: unapproveProgramUsingPOST
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfIdResponse'
  /rest/asset/v1/programs.json:
    get:
      tags:
        - Rest
        - Assets
        - Programs
      summary: Get Programs
      description: >-
        Retrieves the list of accessible programs from the target instance.
        Required Permissions: Read-Only Assets, Read-Write Assets
      operationId: browseProgramsUsingGET
      parameters:
        - name: maxReturn
          in: query
          description: Maximum number of channels to return. Max 200, default 20
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: Integer offset for paging
          schema:
            type: integer
            format: int32
        - name: filterType
          in: query
          description: Optional filter. Requires filterValues
          schema:
            type: string
            enum:
              - id
              - programId
              - folderId
              - workspace
        - name: earliestUpdatedAt
          in: query
          description: >-
            Exclude programs prior to this date. Must be valid ISO-8601 string.
            See <a
            href="http://developers.marketo.com/rest-api/lead-database/fields/field-types/">Datetime</a>
            field type description.
          schema:
            type: string
        - name: latestUpdatedAt
          in: query
          description: >-
            Exclude programs after this date. Must be valid ISO-8601 string. See
            <a
            href="http://developers.marketo.com/rest-api/lead-database/fields/field-types/">Datetime</a>
            field type description.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfBrowseAllPrograms'
    post:
      tags:
        - Rest
        - Assets
        - Programs
      summary: Create Program
      description: 'Creates a new program. Required Permissions: Read-Write Assets'
      operationId: createProgramUsingPOST
      requestBody:
        description: createProgramRequest
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CreateProgramRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfProgramResponse'
      x-codegen-request-body-name: createProgramRequest
  /rest/asset/v1/segmentation.json:
    get:
      tags:
        - Rest
        - Assets
        - Segments
      summary: Get Segmentations
      description: >-
        Retrieves a list of accessible segmentations for the target instance.
        Required Permissions: Read-Only Assets, Read-Write Assets
      operationId: getSegmentationUsingGET
      parameters:
        - name: status
          in: query
          description: Status filter for draft or approved versions
          schema:
            type: string
            enum:
              - approved
              - draft
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfSegmentationResponse'
  /rest/asset/v1/segmentation/{id}/segments.json:
    get:
      tags:
        - Rest
        - Assets
        - Segments.json
        - Segments
      summary: Get Segments For Segmentation
      description: >-
        Retrieves a list of segments inside the target segmentation. Required
        Permissions: Read-Only Assets, Read-Write Assets
      operationId: getSegmentsForSegmentationUsingGET
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
        - name: status
          in: query
          description: Status filter for draft or approved versions
          schema:
            type: string
            enum:
              - approved
              - draft
        - name: offset
          in: query
          description: Integer offset for paging
          schema:
            type: integer
            format: int32
        - name: maxReturn
          in: query
          description: Maximum number of channels to return. Max 200, default 20
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfSegmentsResponse'
  /rest/asset/v1/smartCampaign/{id}.json:
    get:
      tags:
        - Rest
        - Assets
        - Smart
        - Campaigns
        - Smart  Campaigns
      summary: Get Smart Campaign by Id
      description: >-
        Returns the smart campaign for the given id. Required Permissions:
        Read-Only Assets, Read-Write Assets
      operationId: getSmartCampaignByIdUsingGET
      parameters:
        - name: id
          in: path
          description: Id for the smart campaign
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfSmartCampaignResponse'
    post:
      tags:
        - Rest
        - Assets
        - Smart
        - Campaigns
        - Smart  Campaigns
      summary: Update Smart Campaign
      description: >-
        Update the smart campaign for the given id. Required Permissions:
        Read-Write Assets
      operationId: updateSmartCampaignUsingPOST
      parameters:
        - name: id
          in: path
          description: Id for the smart campaign
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: updateSmartCampaignRequest
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSmartCampaignRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfSmartCampaignResponse'
      x-codegen-request-body-name: updateSmartCampaignRequest
  /rest/asset/v1/smartCampaign/byName.json:
    get:
      tags:
        - Rest
        - Assets
        - Smart
        - Campaigns
        - Smart  Campaigns
      summary: Get Smart Campaign by Name
      description: >-
        Returns the smart campaign for the given name. Required Permissions:
        Read-Only Assets, Read-Write Assets
      operationId: getSmartCampaignByNameUsingGET
      parameters:
        - name: name
          in: query
          description: Name for the smart campaign
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfSmartCampaignResponse'
  /rest/asset/v1/smartCampaign/{id}/smartList.json:
    get:
      tags:
        - Rest
        - Assets
        - Smart
        - Campaigns
        - Smart  Campaigns
      summary: Get Smart List by Smart Campaign Id
      description: >-
        Retrieves a Smart List record by its Smart Campaign id. Required
        Permissions: Read-Asset or Read-Write Asset
      operationId: getSmartListBySmartCampaignIdUsingGET
      parameters:
        - name: id
          in: path
          description: Id for the smart campaign containing smart list to retrieve
          required: true
          schema:
            type: integer
            format: int64
        - name: includeRules
          in: query
          description: Set true to populate smart list rules. Default false
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfSmartListResponseWithRules'
  /rest/asset/v1/smartCampaigns.json:
    get:
      tags:
        - Rest
        - Assets
        - Smart
        - Smart  Campaigns
      summary: Get Smart Campaigns
      description: >-
        Retrieves all smart campaigns. Required Permissions: Read-Only Assets,
        Read-Write Assets
      operationId: getAllSmartCampaignsGET
      parameters:
        - name: maxReturn
          in: query
          description: Maximum number of smart campaigns to return. Max 200, default 20
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: Integer offset for paging
          schema:
            type: integer
            format: int32
        - name: folder
          in: query
          description: >-
            JSON representation of parent folder, with members 'id', and 'type'
            which may be 'Folder' or 'Program'
          schema:
            type: string
        - name: earliestUpdatedAt
          in: query
          description: >-
            Exclude smart campaigns prior to this date. Must be valid ISO-8601
            string. See <a
            href="http://developers.marketo.com/rest-api/lead-database/fields/field-types/">Datetime</a>
            field type description.
          schema:
            type: string
        - name: latestUpdatedAt
          in: query
          description: >-
            Exclude smart campaigns after this date. Must be valid ISO-8601
            string. See <a
            href="http://developers.marketo.com/rest-api/lead-database/fields/field-types/">Datetime</a>
            field type description.
          schema:
            type: string
        - name: isActive
          in: query
          description: Set true to return only active campaigns. Default false
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfSmartCampaignResponse'
    post:
      tags:
        - Rest
        - Assets
        - Smart
        - Smart  Campaigns
      summary: Create Smart Campaign
      description: 'Creates a new smart campaign. Required Permissions: Read-Write Assets'
      operationId: createSmartCampaignUsingPOST
      requestBody:
        description: createSmartCampaignRequest
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CreateSmartCampaignRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfSmartCampaignResponse'
      x-codegen-request-body-name: createSmartCampaignRequest
  /rest/asset/v1/smartCampaign/{id}/activate.json:
    post:
      tags:
        - Rest
        - Assets
        - Smart
        - Campaigns
        - Smart  Campaigns
      summary: Activate Smart Campaign
      description: >-
        Activates a trigger smart campaign. Required Permissions: Activate
        Campaign
      operationId: activateSmartCampaignUsingPOST
      parameters:
        - name: id
          in: path
          description: Id of the smart campaign
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfIdResponse'
  /rest/asset/v1/smartCampaign/{id}/deactivate.json:
    post:
      tags:
        - Rest
        - Assets
        - Smart
        - Campaigns
        - Smart  Campaigns
      summary: Deactivate Smart Campaign
      description: >-
        Deactivates a trigger smart campaign. Required Permissions: Deactivate
        Campaign
      operationId: deactivateSmartCampaignUsingPOST
      parameters:
        - name: id
          in: path
          description: Id of the smart campaign
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfIdResponse'
  /rest/asset/v1/smartCampaign/{id}/clone.json:
    post:
      tags:
        - Rest
        - Assets
        - Smart
        - Campaigns
        - Smart  Campaigns
      summary: Clone Smart Campaign
      description: 'Clones a smart campaign. Required Permissions: Read-Write Assets'
      operationId: cloneSmartCampaignUsingPOST
      parameters:
        - name: id
          in: path
          description: Id of the smart campaign
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: cloneSmartCampaignRequest
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CloneSmartCampaignRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfSmartCampaignResponse'
      x-codegen-request-body-name: cloneSmartCampaignRequest
  /rest/asset/v1/smartCampaign/{id}/delete.json:
    post:
      tags:
        - Rest
        - Assets
        - Smart
        - Campaigns
        - Smart  Campaigns
      summary: Delete Smart Campaign
      description: 'Deletes a smart campaign. Required Permissions: Read-Write Assets'
      operationId: deleteSmartCampaignUsingPOST
      parameters:
        - name: id
          in: path
          description: Id of the smart campaign
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfIdResponse'
  /rest/asset/v1/snippet/{id}.json:
    get:
      tags:
        - Rest
        - Assets
        - .Json
        - Snippets
      summary: Get Snippet by Id
      description: >-
        Retrieves the target snippet record. Required Permissions: Read-Only
        Assets, Read-Write Assets
      operationId: getSnippetByIdUsingGET
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
        - name: status
          in: query
          description: Status filter for draft or approved versions
          schema:
            type: string
            enum:
              - approved
              - draft
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfSnippetResponse'
    post:
      tags:
        - Rest
        - Assets
        - .Json
        - Snippets
      summary: Update Snippet Metadata
      description: >-
        Updates the metadata of the snippet. Required Permissions: Read-Write
        Assets
      operationId: updateSnippetUsingPOST
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: updateSnippetRequest
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UpdateSnippetRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfSnippetResponse'
      x-codegen-request-body-name: updateSnippetRequest
  /rest/asset/v1/snippet/{id}/approveDraft.json:
    post:
      tags:
        - Rest
        - Assets
        - Approve
        - Snippets
      summary: Approve Snippet Draft
      description: >-
        Approves the current draft of the snippet. Required Permissions: Approve
        Assets
      operationId: approveSnippetUsingPOST
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfSnippetResponse'
  /rest/asset/v1/snippet/{id}/clone.json:
    post:
      tags:
        - Rest
        - Assets
        - Clone.json
        - Snippets
      summary: Clone Snippet
      description: 'Clones the target snippet. Required Permissions: Read-Write Assets'
      operationId: cloneSnippetUsingPOST
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: cloneSnippetRequest
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CloneSnippetRequest'
        required: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfSnippetResponse'
      x-codegen-request-body-name: cloneSnippetRequest
  /rest/asset/v1/snippet/{id}/content.json:
    get:
      tags:
        - Rest
        - Assets
        - Content.json
        - Snippets
      summary: Get Snippet Content
      description: >-
        Retrieves the content of the target snippet. Required Permissions:
        Read-Only Assets, Read-Write Assets
      operationId: getSnippetContentByIdUsingGET
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
        - name: status
          in: query
          description: Status filter for draft or approved versions
          schema:
            type: string
            enum:
              - approved
              - draft
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfSnippetContentResponse'
    post:
      tags:
        - Rest
        - Assets
        - Content.json
        - Snippets
      summary: Update Snippet Content
      description: >-
        Updates the content of the target snippet. Required Permissions:
        Read-Write Assets
      operationId: updateContentUsingPOST_1
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
        - name: content
          in: query
          description: Content of the snippet
          required: true
          schema:
            type: string
        - name: type
          in: query
          description: Type of snippet content
          required: true
          schema:
            type: string
            enum:
              - DynamicContent
              - HTML
              - Text
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfIdResponse'
  /rest/asset/v1/snippet/{id}/delete.json:
    post:
      tags:
        - Rest
        - Assets
        - Delete.json
        - Snippets
      summary: Delete Snippet
      description: >-
        Deletes the target snippet. The snippet may not be in use by emails or
        landing pages. Required Permissions: Read-Write Assets
      operationId: deleteSnippetUsingPOST
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfIdResponse'
  /rest/asset/v1/snippet/{id}/discardDraft.json:
    post:
      tags:
        - Rest
        - Assets
        - Discard
        - Snippets
      summary: Discard Snippet Draft
      description: >-
        Discards the current draft of the snippet. Required Permissions:
        Read-Write Assets
      operationId: discardSnippetUsingPOST
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfIdResponse'
  /rest/asset/v1/snippet/{id}/dynamicContent.json:
    get:
      tags:
        - Rest
        - Assets
        - Dynamic
        - Snippets
      summary: Get Dynamic Content
      description: >-
        Gets the list of dynamic content sections for the snippet. Required
        Permissions: Read-Only Assets, Read-Write Assets
      operationId: getDynamicContentUsingGET
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
        - name: status
          in: query
          description: Status filter for draft or approved versions
          schema:
            type: string
            enum:
              - approved
              - draft
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelResponse'
  /rest/asset/v1/snippet/{id}/dynamicContent/{segmentId}.json:
    post:
      tags:
        - Rest
        - Assets
        - Dynamic
        - Content
        - Segments
        - Snippets
      summary: Update Snippet Dynamic Content
      description: >-
        Updates the target dynamic content section. Required Permissions:
        Read-Write Assets
      operationId: updateDynamicContentUsingPOST
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
        - name: segmentId
          in: path
          description: segmentId
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: request
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UpdateSnippetDynamicContentRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfIdResponse'
      x-codegen-request-body-name: request
  /rest/asset/v1/snippet/{id}/unapprove.json:
    post:
      tags:
        - Rest
        - Assets
        - Unapprove.json
        - Snippets
      summary: Unapprove Snippet
      description: >-
        Unapproves the current version of the snippet. The snippet may not be in
        use. The snippet will be reverted to a draft-only state. Required
        Permissions: Approve Assets
      operationId: unapproveSnippetUsingPOST
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfSnippetResponse'
  /rest/asset/v1/snippets.json:
    get:
      tags:
        - Rest
        - Assets
        - Snippets
      summary: Get Snippets
      description: >-
        Retrieves a list of accessible snippets from the target instance.
        Required Permissions: Read-Only Assets, Read-Write Assets
      operationId: getSnippetUsingGET
      parameters:
        - name: status
          in: query
          description: Status filter for draft or approved versions
          schema:
            type: string
            enum:
              - approved
              - draft
        - name: maxReturn
          in: query
          description: Maximum number of channels to return. Max 200, default 20
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: Integer offset for paging
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfSnippetResponse'
    post:
      tags:
        - Rest
        - Assets
        - Snippets
      summary: Create Snippet
      description: 'Creates a new snippet. Required Permissions: Read-Write Assets'
      operationId: createSnippetUsingPOST
      requestBody:
        description: createSnippetRequest
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CreateSnippetRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfSnippetResponse'
      x-codegen-request-body-name: createSnippetRequest
  /rest/asset/v1/tagType/byName.json:
    get:
      tags:
        - Rest
        - Assets
        - Tag
        - Type
        - Tags
      summary: Get Tag By Name
      description: >-
        Retrieves a tag by its name. This will also return the set of valid
        values for the tag. Required Permissions: Read-Only Assets, Read-Write
        Assets
      operationId: getTagByNameUsingGET
      parameters:
        - name: name
          in: query
          description: Name of the tag
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfTagResponse'
  /rest/asset/v1/smartList/{id}.json:
    get:
      tags:
        - Rest
        - Assets
        - Smart
        - Id
        - Smart  Lists
      summary: Get Smart List by Id
      description: >-
        Retrieves a Smart List record by its id. Required Permissions:
        Read-Asset or Read-Write Asset
      operationId: getSmartListByIdUsingGET
      parameters:
        - name: id
          in: path
          description: Id of the smart list to retrieve
          required: true
          schema:
            type: integer
            format: int64
        - name: includeRules
          in: query
          description: Set true to populate smart list rules. Default false
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfSmartListResponseWithRules'
  /rest/asset/v1/smartList/byName.json:
    get:
      tags:
        - Rest
        - Assets
        - Smart
        - Name.json
      summary: Get Smart List by Name
      description: >-
        Retrieves a Smart List record by its name. Required Permissions:
        Read-Asset or Read-Write Asset
      operationId: getSmartListByNameUsingGET
      parameters:
        - name: name
          in: query
          description: Name of smart list to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfSmartListResponse'
  /rest/asset/v1/smartList/{id}/delete.json:
    post:
      tags:
        - Rest
        - Assets
        - Smart
        - Id
        - Smart  Lists
      summary: Delete Smart List
      description: >-
        Deletes the designated Smart List. Required Permissions: Read-Write
        Asset
      operationId: deleteSmartListByIdUsingPOST
      parameters:
        - name: id
          in: path
          description: Id of the smart list to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfIdResponse'
  /rest/asset/v1/smartLists.json:
    get:
      tags:
        - Rest
        - Assets
        - Smart
        - Smart  Lists
      summary: Get Smart Lists
      description: >-
        Retrieves a list of user created Smart List records. Required
        Permissions: Read-Asset or Read-Write Asset
      operationId: getSmartListsUsingGET
      parameters:
        - name: folder
          in: query
          description: >-
            JSON representation of parent folder, with members 'id', and 'type'
            which may be 'Folder' or 'Program'
          schema:
            type: string
        - name: offset
          in: query
          description: Integer offset for paging
          schema:
            type: integer
            format: int32
        - name: maxReturn
          in: query
          description: Maximum number of smart lists to return. Max 200, default 20.
          schema:
            type: integer
            format: int32
        - name: earliestUpdatedAt
          in: query
          description: >-
            Exclude smart lists prior to this date. Must be valid ISO-8601
            string. See <a
            href="http://developers.marketo.com/rest-api/lead-database/fields/field-types/">Datetime</a>
            field type description.
          schema:
            type: string
        - name: latestUpdatedAt
          in: query
          description: >-
            Exclude smart lists after this date. Must be valid ISO-8601 string.
            See <a
            href="http://developers.marketo.com/rest-api/lead-database/fields/field-types/">Datetime</a>
            field type description.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfSmartListResponse'
  /rest/asset/v1/smartList/{id}/clone.json:
    post:
      tags:
        - Rest
        - Assets
        - Smart
        - Id
        - Smart  Lists
      summary: Clone Smart List
      description: 'Clones the designated Smart List. Required Permissions: Read-Write Asset'
      operationId: cloneSmartListUsingPOST
      parameters:
        - name: id
          in: path
          description: Id of smart list to clone
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: cloneSmartListRequest
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CloneSmartListRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfSmartListResponse'
      x-codegen-request-body-name: cloneSmartListRequest
  /rest/asset/v1/staticList/{id}.json:
    get:
      tags:
        - Rest
        - Assets
        - Static
        - Id
        - Static  Lists
      summary: Get Static List by Id
      description: >-
        Retrieves a Static List record by its id. Required Permissions:
        Read-Asset or Read-Write Asset
      operationId: getStaticListByIdUsingGET
      parameters:
        - name: id
          in: path
          description: Id of the static list to retrieve
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfStaticListResponse'
    post:
      tags:
        - Rest
        - Assets
        - Static
        - Id
        - Static  Lists
      summary: Update Static List Metadata
      description: >-
        Updates the metadata of a static list asset. Required Permissions:
        Read-Write Assets
      operationId: updateStaticListUsingPOST
      parameters:
        - name: id
          in: path
          description: Id of static list to update
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: updateStaticListRequest
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UpdateStaticListRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfStaticListResponse'
      x-codegen-request-body-name: updateStaticListRequest
  /rest/asset/v1/staticLists.json:
    get:
      tags:
        - Rest
        - Assets
        - Static
        - Static  Lists
      summary: Get Static Lists
      description: >-
        Retrieves a list of Static List records. Required Permissions:
        Read-Asset or Read-Write Asset
      operationId: getStaticListsUsingGET
      parameters:
        - name: folder
          in: query
          description: >-
            JSON representation of parent folder, with members 'id', and 'type'
            which may be 'Folder' or 'Program'
          schema:
            type: string
        - name: offset
          in: query
          description: Integer offset for paging
          schema:
            type: integer
            format: int32
        - name: maxReturn
          in: query
          description: Maximum number of static lists to return. Max 200, default 20.
          schema:
            type: integer
            format: int32
        - name: earliestUpdatedAt
          in: query
          description: >-
            Exclude static lists prior to this date. Must be valid ISO-8601
            string. See <a
            href="http://developers.marketo.com/rest-api/lead-database/fields/field-types/">Datetime</a>
            field type description.
          schema:
            type: string
        - name: latestUpdatedAt
          in: query
          description: >-
            Exclude static lists after this date. Must be valid ISO-8601 string.
            See <a
            href="http://developers.marketo.com/rest-api/lead-database/fields/field-types/">Datetime</a>
            field type description.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfStaticListResponse'
    post:
      tags:
        - Rest
        - Assets
        - Static
        - Static  Lists
      summary: Create Static List
      description: 'Creates a new Static List. Required Permissions: Read-Write Assets'
      operationId: createStaticListUsingPOST
      requestBody:
        description: createStaticListRequest
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CreateStaticListRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfStaticListResponse'
      x-codegen-request-body-name: createStaticListRequest
  /rest/asset/v1/staticList/byName.json:
    get:
      tags:
        - Rest
        - Assets
        - Static
        - Name.json
      summary: Get Static List by Name
      description: >-
        Retrieves a Static List record by its name. Required Permissions:
        Read-Asset or Read-Write Asset
      operationId: getStaticListByNameUsingGET
      parameters:
        - name: name
          in: query
          description: Name of static list to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfStaticListResponse'
  /rest/asset/v1/staticList/{id}/delete.json:
    post:
      tags:
        - Rest
        - Assets
        - Static
        - Id
        - Static  Lists
      summary: Delete Static List
      description: >-
        Deletes the designated Static List. Required Permissions: Read-Write
        Asset
      operationId: deleteStaticListByIdUsingPOST
      parameters:
        - name: id
          in: path
          description: Id of the static list to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfIdResponse'
  /rest/asset/v1/tagTypes.json:
    get:
      tags:
        - Rest
        - Assets
        - Tag
        - Tags
      summary: Get Tag Types
      description: >-
        Retrieves a list of available tag types. Required Permissions: Read-Only
        Assets, Read-Write Assets
      operationId: getTagTypesUsingGET
      parameters:
        - name: maxReturn
          in: query
          description: Maximum number of channels to return. Max 200, default 20
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: Integer offset for paging
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfTagResponseGetAll'
components:
  schemas:
    CreateProgramRequest:
      required:
        - channel
        - folder
        - name
        - type
      type: object
      properties:
        channel:
          type: string
          description: Channel of the program
        costs:
          type: array
          description: Lists of associated period costs
          items:
            $ref: '#/components/schemas/CostRequest'
        description:
          type: string
        folder:
          $ref: '#/components/schemas/Folder'
        name:
          type: string
          description: Name of the program
        tags:
          type: array
          description: List of associated program tags
          items:
            $ref: '#/components/schemas/TagRequest'
        type:
          type: string
          description: Type of the program
    UpdateEmailMetaDataRequest:
      type: object
      properties:
        description:
          type: string
          description: Description of the asset
        name:
          type: string
          description: Name of the Email
        preHeader:
          type: string
          description: Preheader text for the email
        operational:
          type: boolean
          description: >-
            Whether the email is operational. Operational emails bypass
            unsubscribe status. Defaults to false
        published:
          type: boolean
          description: Whether the email has been published to Sales Insight. Default false
        textOnly:
          type: boolean
          description: Setting to include text-only version of email when sent
        webView:
          type: boolean
          description: >-
            Whether the email has been enabled to allow the 'View as Web Page'
            when received
    CreateLandingPageRedirectRuleRequest:
      required:
        - hostname
        - redirectFrom
        - redirectTo
      type: object
      properties:
        hostname:
          type: string
          description: >-
            The hostname for the landing pages. Branding domain or alias. Max
            255 characters
        redirectFrom:
          $ref: '#/components/schemas/RedirectFrom'
        redirectTo:
          $ref: '#/components/schemas/RedirectTo'
    UpdateLandingPageRedirectRuleRequest:
      type: object
      properties:
        hostname:
          type: string
          description: >-
            The hostname for the landing pages. Branding domain or alias. Max
            255 characters
        redirectFrom:
          $ref: '#/components/schemas/RedirectFrom'
        redirectTo:
          $ref: '#/components/schemas/RedirectTo'
    BrowseAllPrograms:
      required:
        - channel
        - folder
        - status
        - type
      type: object
      properties:
        channel:
          type: string
          description: Channel of the program
        createdAt:
          type: string
          description: Datetime the asset was created
          format: date-time
        description:
          type: string
          description: Description of the asset
        folder:
          $ref: '#/components/schemas/Folder'
        id:
          type: integer
          description: Id of the asset
          format: int64
        name:
          type: string
          description: Name of the asset
        sfdcId:
          type: string
          description: SFDC id of the program if linked to an SFDC campaign
        sfdcName:
          type: string
          description: Name of the linked SFDC campaign if applicable
        status:
          type: string
          description: >-
            Status of the program. Only valid for Email and engagement program
            types.
          enum:
            - locked
            - unlocked
            - 'on'
            - 'off'
        type:
          type: string
          description: Type of the program
          enum:
            - program
            - event
            - webinar
            - nurture
        updatedAt:
          type: string
          description: Datetime the asset was most recently updated
          format: date-time
        url:
          type: string
          description: Url of the asset in the Marketo UI
        workspace:
          type: string
          description: Name of the workspace
    CloneEmailTemplateRequest:
      required:
        - folder
        - name
      type: object
      properties:
        description:
          type: string
          description: Description of the asset
        folder:
          $ref: '#/components/schemas/Folder'
        name:
          type: string
          description: Name of the Email Template
    CreateEmailTemplateRequest:
      required:
        - content
        - folder
        - name
      type: object
      properties:
        name:
          type: string
          description: Name of the Email Template. Must be unique under the parent folder.
        folder:
          $ref: '#/components/schemas/Folder'
        description:
          type: string
          description: Description of the email template
        content:
          type: string
          description: HTML content for template. Multipart file.
    CloneFormRequest:
      required:
        - folder
        - name
      type: object
      properties:
        name:
          type: string
          description: Name for the cloned form
        folder:
          $ref: '#/components/schemas/Folder'
        description:
          type: string
          description: Description of the cloned form
    CloneSnippetRequest:
      required:
        - folder
        - name
      type: object
      properties:
        name:
          type: string
          description: Name for the cloned snippet
        folder:
          $ref: '#/components/schemas/Folder'
        description:
          type: string
          description: Description of the cloned snippet
    CloneSmartListRequest:
      required:
        - folder
        - name
      type: object
      properties:
        name:
          type: string
          description: Name for the cloned smart list
        folder:
          $ref: '#/components/schemas/Folder'
        description:
          type: string
          description: Description of the cloned smart list
    UpdateEmailTemplateMetaDataRequest:
      type: object
      properties:
        description:
          type: string
          description: Description of the asset
        name:
          type: string
          description: Name of the Email Template
    CloneLandingPageRequest:
      required:
        - folder
        - name
      type: object
      properties:
        description:
          type: string
          description: Description of the asset
        folder:
          $ref: '#/components/schemas/Folder'
        name:
          type: string
          description: Name of the landing page
        template:
          type: integer
          description: Id of the template used
          format: int32
    ResponseOfLandingPageResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
        requestId:
          type: string
        result:
          type: array
          items:
            $ref: '#/components/schemas/LandingPageResponse'
        success:
          type: boolean
        warnings:
          type: array
          items:
            type: string
    ResponseOfLandingPageRedirectRules:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
        requestId:
          type: string
        result:
          type: array
          items:
            $ref: '#/components/schemas/LandingPageRedirectRule'
        success:
          type: boolean
        warnings:
          type: array
          items:
            type: string
    ResponseOfLandingPageDomains:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
        requestId:
          type: string
        result:
          type: array
          items:
            $ref: '#/components/schemas/LandingPageDomain'
        success:
          type: boolean
        warnings:
          type: array
          items:
            type: string
    UpdateProgramRequest:
      type: object
      properties:
        costs:
          type: array
          description: >-
            Lists of associated period costs that allow you to append, replace,
            or delete. To append new costs, simply add them to costs array. To
            replace costs (destructive update), pass new costs and set
            costsDestructiveUpdate to true. To delete costs, do not pass costs
            parameter and set costsDestructiveUpdate to true
          items:
            $ref: '#/components/schemas/CostRequest'
        costsDestructiveUpdate:
          type: boolean
          description: >-
            Set true to destroy existing costs and replace them with the
            specified costs
        description:
          type: string
          description: Updated description for the program
        endDate:
          type: string
          description: >-
            End date of the program. Applicable to event, email, and webinar
            type programs
        name:
          type: string
          description: Name of the program
        startDate:
          type: string
          description: >-
            Start date of program. Applicable to event, email and webinar type
            programs
        tags:
          type: array
          description: List of associated program tags
          items:
            $ref: '#/components/schemas/TagRequest'
    FolderContentResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        type:
          type: string
    LandingPageDynamicContentResponse:
      type: object
      properties:
        content:
          type: array
          description: List of variations in the section
          items:
            $ref: '#/components/schemas/SegmentContent'
        createdAt:
          type: string
          description: Datetime when the section was created
          format: date-time
        id:
          type: integer
          description: Id of the dnamic content section
          format: int32
        segmentation:
          type: integer
          description: Segmentation to which the section is linked
          format: int32
        updatedAt:
          type: string
          description: Datetime when the section was last updated
          format: date-time
    FileFolder:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        type:
          type: string
    ResponseOfSegmentsResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
        requestId:
          type: string
        result:
          type: array
          items:
            $ref: '#/components/schemas/SegmentsResponse'
        success:
          type: boolean
        warnings:
          type: array
          items:
            type: string
    ResponseOfProgramResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
        requestId:
          type: string
        result:
          type: array
          items:
            $ref: '#/components/schemas/ProgramResponse'
        success:
          type: boolean
        warnings:
          type: array
          items:
            type: string
    CostRequest:
      required:
        - cost
        - startDate
      type: object
      properties:
        cost:
          type: integer
          description: Amount of the cost
          format: int32
        note:
          type: string
          description: Notes on the cost
        startDate:
          type: string
          description: Start date of the period cost
          format: date-time
    EmailResponse:
      required:
        - autoCopyToText
        - folder
        - fromEmail
        - fromName
        - operational
        - preHeader
        - publishToMSI
        - replyEmail
        - status
        - subject
        - template
        - textOnly
        - webView
      type: object
      properties:
        createdAt:
          type: string
          description: Datetime the asset was created
          format: date-time
        description:
          type: string
          description: Description of the asset
        folder:
          $ref: '#/components/schemas/Folder'
        fromEmail:
          $ref: '#/components/schemas/EmailHeaderField'
        fromName:
          $ref: '#/components/schemas/EmailHeaderField'
        id:
          type: integer
          description: Id of the asset
          format: int64
        name:
          type: string
          description: Name of the asset
        operational:
          type: boolean
          description: >-
            Whether the email is operational. Operational emails bypass
            unsubscribe status. Defaults to false
        publishToMSI:
          type: boolean
          description: Whether the email is published to Marketo Sales Insight
        replyEmail:
          $ref: '#/components/schemas/EmailHeaderField'
        status:
          type: string
          description: Status filter for draft or approved versions
        subject:
          $ref: '#/components/schemas/EmailHeaderField'
        template:
          type: integer
          description: Id of the parent template
          format: int32
        textOnly:
          type: boolean
          description: Setting to include text-only version of email when sent
        updatedAt:
          type: string
          description: Datetime the asset was most recently updated
          format: date-time
        url:
          type: string
          description: Url of the asset in the Marketo UI
        version:
          type: integer
          description: The type version of the email
          format: int32
          enum:
            - 1
            - 2
        webView:
          type: boolean
          description: Whether 'View as Webpage' function is enabled for the email
        workspace:
          type: string
          description: Name of the workspace
        autoCopyToText:
          type: boolean
          description: Setting to automatically copy HTML version to Text version
        preHeader:
          type: string
          description: The email preheader text (max 1024 characters)
        ccFields:
          type: array
          items:
            $ref: '#/components/schemas/EmailCCFields'
    EmailCCFields:
      required:
        - apiName
        - attributeId
        - displayName
        - objectName
      type: object
      properties:
        attributeId:
          type: string
          description: Attribute identifier
        objectName:
          type: string
          description: Object name. 'lead' or 'company'
        displayName:
          type: string
          description: Display name
        apiName:
          type: string
          description: API name
    LpTemplateResponse:
      required:
        - enableMunchkin
        - folder
        - status
        - templateType
      type: object
      properties:
        createdAt:
          type: string
          description: Datetime the asset was created
          format: date-time
        description:
          type: string
          description: Description of the asset
        enableMunchkin:
          type: boolean
          description: Whether to enable munchkin on the derived pages. Defaults to true
        folder:
          $ref: '#/components/schemas/Folder'
        id:
          type: integer
          description: Id of the asset
          format: int64
        name:
          type: string
          description: Name of the asset
        status:
          type: string
          description: Status filter for draft or approved versions
        templateType:
          type: string
          description: Type of template to create. Defaults to freeForm
          enum:
            - guided
            - freeForm
        updatedAt:
          type: string
          description: Datetime the asset was most recently updated
          format: date-time
        url:
          type: string
          description: Url of the asset in the Marketo UI
        workspace:
          type: string
          description: Name of the workspace. Max 255 characters
    CloneProgramRequest:
      required:
        - folder
        - name
      type: object
      properties:
        description:
          type: string
        folder:
          $ref: '#/components/schemas/Folder'
        name:
          type: string
          description: Name of the program. Max 255 characters
    CreateFolderRequest:
      required:
        - name
        - parent
      type: object
      properties:
        description:
          type: string
          description: Description of the asset
        name:
          type: string
          description: Name of the Folder
        parent:
          $ref: '#/components/schemas/Folder'
    CreateStaticListRequest:
      required:
        - folder
        - name
      type: object
      properties:
        description:
          type: string
          description: Description of the static list
        name:
          type: string
          description: Name of the static list
        folder:
          $ref: '#/components/schemas/Folder'
    UpdateStaticListRequest:
      type: object
      properties:
        description:
          type: string
          description: Description of the static list
        name:
          type: string
          description: Name of the static list
    UpdateFormFieldRequest:
      type: object
      properties:
        blankFields:
          type: integer
          description: Number of blank fields to show when progressive profiling is enabled
          format: int32
        defaultValue:
          type: string
          description: Optional default value for the field
        fieldType:
          type: string
          description: Type of field
        fieldWidth:
          type: integer
          description: Width of the input or select element
          format: int32
        formPrefill:
          type: boolean
          description: Whether the field should prefill. Default true
        isSensitive:
          type: boolean
          description: Whether the field is marked as sensitive. Default false
        hintText:
          type: string
          description: Hint text for the field
        initiallyChecked:
          type: boolean
          description: Whether the field should be checked upon loading. Default false
        instructions:
          type: string
          description: Instructions for the field
        label:
          type: string
          description: Label of the field
        labelToRight:
          type: boolean
          description: >-
            Whether the field label should be displayed to the right of the
            input/select element. Default false
        labelWidth:
          type: integer
          description: Width of the field label element
          format: int32
        maskInput:
          type: string
          description: Optional input mask for the field
        maxLength:
          type: integer
          description: Maximum length for text type fields
          format: int32
        maxValue:
          type: number
          description: Maximum value accepted by the field
          format: float
        minValue:
          type: number
          description: Minimum value accepted by the field
          format: float
        multiSelect:
          type: boolean
          description: Whether the field should allow multiple selections. Default false
        required:
          type: boolean
          description: Whether the field is required to submit the form. Default false
        validationMessage:
          type: string
          description: Validation message to display on failed validation
        values:
          type: string
          description: >-
            Array of JSON objects that contain field attributes. Only for
            select-field types. Example:
            values=[{'label':'Select...','value':'','isDefault':true,'selected':true},
            {'label':'MR','value':'Mr'}, {'label':'MS','value':'Ms'},
            {'label':'MRS','value':'Mrs'}, {'label':'DR','value':'Dr'},
            {'label':'PROF','value':'Prof'}]
        visibleLines:
          type: integer
          description: Number of lines to display for the field element
          format: int32
    SnippetContentResponse:
      required:
        - type
      type: object
      properties:
        content:
          type: string
          description: Content of the snippet
        type:
          type: string
          description: Type of snippet content
    GetFilesRequest:
      type: object
      properties:
        folder:
          $ref: '#/components/schemas/Folder'
        maxReturn:
          type: integer
          description: Maximum number of channels to return. Max 200, default 20
          format: int32
        offset:
          type: integer
          description: Integer offset for paging
          format: int32
    ResponseOfEmailDynamicContentResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
        requestId:
          type: string
        result:
          type: array
          items:
            $ref: '#/components/schemas/EmailDynamicContentResponse'
        success:
          type: boolean
        warnings:
          type: array
          items:
            type: string
    FormFieldVisibilityRequest:
      required:
        - ruleType
        - rules
      type: object
      properties:
        ruleType:
          type: string
          description: Type of rule to apply
          enum:
            - show
            - alwaysShow
            - hide
        rules:
          type: array
          description: JSON Array of rules
          items:
            $ref: '#/components/schemas/VisibilityRuleRequest'
    UpdateFolderRequest:
      required:
        - type
      type: object
      properties:
        description:
          type: string
          description: Description of the asset
        isArchive:
          type: boolean
          description: >-
            Whether the folder is archived or not. Toggling this value will
            change the archival status of the folder
        name:
          type: string
          description: Name of the Folder
        type:
          type: string
          description: Type of folder. 'Folder' or 'Program'
          enum:
            - Folder
            - Program
    ResponseOfLpFormFieldResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
        requestId:
          type: string
        result:
          type: array
          items:
            $ref: '#/components/schemas/LpFormFieldResponse'
        success:
          type: boolean
        warnings:
          type: array
          items:
            type: string
    ThankYouPageResponse:
      type: object
      properties:
        id:
          type: integer
          format: int32
        thankYouList:
          type: array
          items:
            $ref: '#/components/schemas/FormThankYouPageDTO'
    CreateLandingPageContentRequest:
      required:
        - contentId
        - type
      type: object
      properties:
        backgroundColor:
          type: string
          description: background-color property of the HTML section
        borderColor:
          type: string
          description: border-color property of the HTML section
        borderStyle:
          type: string
          description: border-style property of the HTML section
        borderWidth:
          type: string
          description: border-width property of the HTML section
        contentId:
          type: string
          description: Id of the content section. Also the HTML id of the section.
        height:
          type: string
          description: height property of the HTML section
        hideDesktop:
          type: boolean
          description: Hide the section when displayed on a desktop browser. Default false
        hideMobile:
          type: boolean
          description: Hide the section when displayed on a mobile browser. Default false
        imageOpenNewWindow:
          type: string
        left:
          type: string
          description: left property of the HTML section
        linkUrl:
          type: string
          description: URL parameter of a link type section
        opacity:
          type: string
          description: opacity property of the HTML section
        top:
          type: string
          description: top property of the HTML section
        type:
          type: string
          description: Type of content section
          enum:
            - Image
            - Form
            - Rectangle
            - Snippet
            - RichText
            - HTML
        value:
          type: string
          description: Type of content section
        width:
          type: string
          description: width property of the HTML section
        zIndex:
          type: string
          description: z-index property of the HTML section
    JsonNode:
      type: object
      properties:
        array:
          type: boolean
        bigDecimal:
          type: boolean
        bigInteger:
          type: boolean
        binary:
          type: boolean
        boolean:
          type: boolean
        containerNode:
          type: boolean
        double:
          type: boolean
        float:
          type: boolean
        floatingPointNumber:
          type: boolean
        int:
          type: boolean
        integralNumber:
          type: boolean
        long:
          type: boolean
        missingNode:
          type: boolean
        nodeType:
          type: string
          enum:
            - ARRAY
            - BINARY
            - BOOLEAN
            - MISSING
            - 'NULL'
            - NUMBER
            - OBJECT
            - POJO
            - STRING
        'null':
          type: boolean
        number:
          type: boolean
        object:
          type: boolean
        pojo:
          type: boolean
        short:
          type: boolean
        textual:
          type: boolean
        valueNode:
          type: boolean
    EmailContentResponse:
      required:
        - contentType
        - htmlId
        - value
      type: object
      properties:
        contentType:
          type: string
          description: Type of content to set for the section.
        htmlId:
          type: string
          description: HTML id of the content section
        index:
          type: integer
          format: int32
        isLocked:
          type: boolean
        parentHtmlId:
          type: string
        value:
          type: object
          properties: {}
          description: Contents of the section
    SnippetResponse:
      required:
        - folder
        - status
      type: object
      properties:
        createdAt:
          type: string
          description: Datetime the asset was created
          format: date-time
        description:
          type: string
          description: Description of the asset
        folder:
          $ref: '#/components/schemas/SnippetFolder'
        id:
          type: integer
          description: Id of the asset
          format: int64
        name:
          type: string
          description: Name of the asset
        status:
          type: string
          description: Status filter for draft or approved versions
        updatedAt:
          type: string
          description: Datetime the asset was most recently updated
          format: date-time
        url:
          type: string
          description: Url of the asset in the Marketo UI
        workspace:
          type: string
          description: Name of the workspace
    LpFormResponse:
      required:
        - buttonLabel
        - buttonLocation
        - folder
        - fontFamily
        - fontSize
        - knownVisitor
        - labelPosition
        - language
        - locale
        - progressiveProfiling
        - status
        - thankYouList
        - theme
        - waitingLabel
      type: object
      properties:
        buttonLabel:
          type: string
          description: Label text of the button
        buttonLocation:
          type: integer
          description: Location in pixels of the button relative to the left of the form
          format: int32
        createdAt:
          type: string
          description: Datetime the asset was created
          format: date-time
        description:
          type: string
          description: Description of the asset
        folder:
          $ref: '#/components/schemas/Folder'
        fontFamily:
          type: string
          description: font-family property for the form
        fontSize:
          type: string
          description: font-size property of the form
        id:
          type: integer
          description: Id of the asset
          format: int64
        knownVisitor:
          $ref: '#/components/schemas/FormKnownVisitorDTO'
        labelPosition:
          type: string
          description: Default positioning of labels.
        language:
          type: string
          description: Language of the form
        locale:
          type: string
          description: Locale of the form
        name:
          type: string
          description: Name of the asset
        progressiveProfiling:
          type: boolean
          description: Whether progressive profiling is enabled for the form
        status:
          type: string
          description: Status filter for draft or approved versions
          enum:
            - approved
            - draft
        thankYouList:
          type: array
          description: List of thank you page behaviors for the form
          items:
            $ref: '#/components/schemas/FormThankYouPageDTO'
        theme:
          type: string
          description: CSS theme for the form to use
        updatedAt:
          type: string
          description: Datetime the asset was most recently updated
          format: date-time
        url:
          type: string
          description: Url of the asset in the Marketo UI
        waitingLabel:
          type: string
          description: Waiting text of the button
    UpdateLandingPageRequest:
      type: object
      properties:
        customHeadHTML:
          type: string
          description: Any custom HTML to embed in the <head> tag of the page
        description:
          type: string
          description: Description of the asset
        facebookOgTags:
          type: string
          description: Any OpenGraph meta tags to apply to the page
        keywords:
          type: string
        metaTagsDescription:
          type: string
          description: Meta description property of the page
        mobileEnabled:
          type: boolean
          description: >-
            Whether the page has mobile viewing enabled. Free-form pages only.
            Default false
        name:
          type: string
          description: Name of the landing page
        robots:
          type: string
          description: Robots directives to apply to the pages meta tags
        styleOverRide:
          type: string
          description: Additional CSS styles to append to the landing page <head>
        title:
          type: string
          description: Title element of the landing page
        urlPageName:
          type: string
          description: URL path of the page. Derived from the name field if unset
    UpdateFormMetaDataRequest:
      type: object
      properties:
        customCss:
          type: string
          description: Custom CSS to apply to the form
        description:
          type: string
          description: Description of the form
        fontFamily:
          type: string
          description: font-family property for the form
        fontSize:
          type: string
          description: font-size property of the form
        knownVisitor:
          $ref: '#/components/schemas/FormKnownVisitorDTO'
        labelPosition:
          type: string
          description: Default positioning of labels.
        language:
          type: string
          description: Language of the form
        locale:
          type: string
          description: Locale of the form
        name:
          type: string
          description: Name of the form
        progressiveProfiling:
          type: boolean
          description: Whether progressive profiling is enabled for the form
        theme:
          type: string
          description: CSS theme for the form to use
    ResponseOfLandingPageContentResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
        requestId:
          type: string
        result:
          type: array
          items:
            $ref: '#/components/schemas/LandingPageContentResponse'
        success:
          type: boolean
        warnings:
          type: array
          items:
            type: string
    UpdateLandingPageContentRequest:
      required:
        - type
      type: object
      properties:
        backgroundColor:
          type: string
          description: background-color property of the HTML section
        borderColor:
          type: string
          description: border-color property of the HTML section
        borderStyle:
          type: string
          description: border-style property of the HTML section
        borderWidth:
          type: string
          description: border-width property of the HTML section
        height:
          type: string
          description: height property of the HTML section
        hideDesktop:
          type: boolean
          description: Hide the section when displayed on a desktop browser. Default false
        hideMobile:
          type: boolean
          description: Hide the section when displayed on a mobile browser. Default false
        imageOpenNewWindow:
          type: string
        index:
          type: integer
          description: >-
            Index of the content section. Determines the order of the section in
            the landing page
          format: int32
        left:
          type: string
          description: left property of the HTML section
        linkUrl:
          type: string
          description: URL parameter of a link type section
        opacity:
          type: string
          description: opacity property of the HTML section
        top:
          type: string
          description: top property of the HTML section
        type:
          type: string
          description: Type of content section
          enum:
            - Image
            - Form
            - Rectangle
            - Snippet
            - RichText
            - HTML
            - DynamicContent
        value:
          type: string
          description: Type of content section
        width:
          type: string
          description: width property of the HTML section
        zIndex:
          type: string
          description: z-index property of the HTML section
    VisibilityRuleRequest:
      required:
        - operator
        - subjectField
        - values
      type: object
      properties:
        altLabel:
          type: string
        operator:
          type: string
          description: >-
            Operation to apply to target field. Evaluated against the list of
            values when applicable.
          enum:
            - is
            - isNot
            - isEmpty
            - isNotEmpty
            - startsWith
            - notStartsWith
            - endsWith
            - notEndsWith
            - contains
            - notContains
            - greaterThan
            - lessThan
            - atLeast
            - atMost
            - between
            - notBetween
            - notInTimeFrame
            - inPast
            - notInPast
            - after
            - before
            - inTimeFrame
            - onOrAfter
            - onOrBefore
        pickListValues:
          type: array
          description: Alternative label to display when rules are applied.
          items:
            $ref: '#/components/schemas/PickListDTO'
        subjectField:
          type: string
          description: Target field id to apply the operation defined by operator to
        values:
          type: array
          description: >-
            Comma-separated list of values to match against. Valid for operators
            'is', 'isNot', 'startsWith', 'notStartsWith', 'endsWith',
            'notEndsWith', 'contains', and 'notContains'
          items:
            type: string
    ModelResponse:
      type: object
    ResponseOfLpTemplateGetContentResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
        requestId:
          type: string
        result:
          type: array
          items:
            $ref: '#/components/schemas/LpTemplateGetContentResponse'
        success:
          type: boolean
        warnings:
          type: array
          items:
            type: string
    ResponseOfLpFormResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
        requestId:
          type: string
        result:
          type: array
          items:
            $ref: '#/components/schemas/LpFormResponse'
        success:
          type: boolean
        warnings:
          type: array
          items:
            type: string
    ResponseOfTagResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
        requestId:
          type: string
        result:
          type: array
          items:
            $ref: '#/components/schemas/TagResponse'
        success:
          type: boolean
        warnings:
          type: array
          items:
            type: string
    TagRequest:
      type: object
      properties:
        tagType:
          type: string
          description: Type of program tag
        tagValue:
          type: string
          description: Value of the tag
    SegmentContent:
      required:
        - content
        - segmentId
        - segmentName
        - type
      type: object
      properties:
        content:
          type: object
          properties: {}
          description: Type of content section
        followupType:
          type: string
        followupValue:
          type: string
        segmentId:
          type: integer
          description: Segmentation to which the section is linked
          format: int32
        segmentName:
          type: string
          description: Name of the segment to display content section for
        type:
          type: string
          description: Type of content section
    ResponseOfFieldsMetaDataResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
        requestId:
          type: string
        result:
          type: array
          items:
            $ref: '#/components/schemas/FieldsMetaDataResponse'
        success:
          type: boolean
        warnings:
          type: array
          items:
            type: string
    TokenResponse:
      required:
        - folder
      type: object
      properties:
        folder:
          type: string
          description: >-
            JSON representation of parent folder, with members 'id', and 'type'
            which may be 'Folder' or 'Program'
          example: '{"id":1001,"type":"Program"}'
        tokens:
          type: array
          description: List of tokens in the folder
          items:
            $ref: '#/components/schemas/TokenDTO'
    CreateEmailRequest:
      required:
        - folder
        - fromEmail
        - fromName
        - name
        - replyEmail
        - subject
        - template
      type: object
      properties:
        description:
          type: string
          description: Description of the asset
        folder:
          $ref: '#/components/schemas/Folder'
        fromEmail:
          type: string
          description: From-address of the Email
        fromName:
          type: string
          description: From-name of the Email
        name:
          type: string
          description: Name of the email
        operational:
          type: boolean
          description: >-
            Whether the email is operational. Operational emails bypass
            unsubscribe status. Defaults to false
        replyEmail:
          type: string
          description: Reply-To address of the Email
        subject:
          type: string
          description: Subject Line of the Email
        template:
          type: integer
          description: Id of the parent template
          format: int32
        textOnly:
          type: string
          description: Setting to include text-only version of email when sent
    EmailHeaderField:
      required:
        - type
        - value
      type: object
      properties:
        type:
          type: string
          description: Field type
        value:
          type: string
          description: Value of field
    EmailTemplateResponse:
      required:
        - folder
        - status
      type: object
      properties:
        createdAt:
          type: string
          description: Datetime the asset was created
          format: date-time
        description:
          type: string
          description: Description of the asset
        folder:
          $ref: '#/components/schemas/Folder'
        id:
          type: integer
          description: Id of the asset
          format: int64
        name:
          type: string
          description: Name of the asset
        status:
          type: string
          description: Status filter for draft or approved versions
        updatedAt:
          type: string
          description: Datetime the asset was most recently updated
          format: date-time
        url:
          type: string
          description: Url of the asset in the Marketo UI
        version:
          type: integer
          description: Template version type
          format: int32
          enum:
            - 1
            - 2
        workspace:
          type: string
          description: Name of the workspace
    EmailTemplateUsedByResponse:
      required:
        - id
        - name
        - status
        - type
        - updatedAt
      type: object
      properties:
        id:
          type: integer
          description: Id of the asset
          format: int64
        name:
          type: string
          description: Name of the asset
        type:
          type: string
          description: Type of asset
        status:
          type: string
          description: Status filter for draft or approved versions
          enum:
            - approved
            - draft
        updatedAt:
          type: string
          description: Datetime the asset was most recently updated
          format: date-time
    FormUsedByResponse:
      required:
        - id
        - name
        - status
        - type
        - updatedAt
      type: object
      properties:
        id:
          type: integer
          description: Id of the asset
          format: int64
        name:
          type: string
          description: Name of the asset
        type:
          type: string
          description: Type of asset
        status:
          type: string
          description: Status filter for draft or approved versions
          enum:
            - approved
            - draft
        updatedAt:
          type: string
          description: Datetime the asset was most recently updated
          format: date-time
    ResponseOfThankYouPageResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
        requestId:
          type: string
        result:
          type: array
          items:
            $ref: '#/components/schemas/ThankYouPageResponse'
        success:
          type: boolean
        warnings:
          type: array
          items:
            type: string
    ChannelResponse:
      required:
        - applicableProgramType
        - createdAt
        - id
        - name
        - updatedAt
      type: object
      properties:
        applicableProgramType:
          type: string
          description: Types of programs to which the channel can apply
        createdAt:
          type: string
          description: Datetime when the channel was created
          format: date-time
        id:
          type: integer
          description: Id of the Channel
          format: int32
        name:
          type: string
          description: Name of the Channel
        progressionStatuses:
          type: array
          description: List of available statuses for members of programs with the channel
          items:
            $ref: '#/components/schemas/ChannelProgression'
        updatedAt:
          type: string
          description: Datetime when the channel was most recently updated
          format: date-time
    EmailModuleResponse:
      required:
        - id
      type: object
      properties:
        id:
          type: integer
          description: Id of the email module
          format: int32
    EmailVariableResponse:
      required:
        - moduleScope
        - name
        - value
      type: object
      properties:
        name:
          type: string
          description: Name of the email variable
        value:
          type: string
          description: Value of the email variable
        moduleScope:
          type: boolean
          description: Returns true for local variables else returns false
        moduleId:
          type: string
          description: >-
            Returns the moduleId associated with the variable, only in case of
            local variable
    SmartCampaignResponse:
      required:
        - createdAt
        - description
        - flowId
        - folder
        - id
        - isActive
        - isCommunicationLimitEnabled
        - isRequestable
        - isSystem
        - maxMembers
        - name
        - qualificationRuleInterval
        - qualificationRuleType
        - qualificationRuleUnit
        - recurrence
        - smartListId
        - status
        - type
        - updatedAt
        - workspace
      type: object
      properties:
        id:
          type: integer
          description: Id of the smart campaign (system managed)
          format: int32
        name:
          type: string
          description: Name of the smart campaign
        description:
          type: string
          description: Description of the smart campaign
        type:
          type: string
          description: >-
            Type of the smart campaign. Batch: has at least one filter and no
            triggers. Trigger: has at least one trigger. Default: has no smart
            list rules
          enum:
            - batch
            - default
            - trigger
        isSystem:
          type: boolean
          description: Whether smart campaign is system managed. Defaults to false
        isActive:
          type: boolean
          description: Whether smart campaign is active. Defaults to false
        isRequestable:
          type: boolean
          description: >-
            Whether smart campaign is requestable (is active and contains
            'Campaign is Requested' trigger with Source of 'Web Service API').
            Defaults to false
        recurrence:
          $ref: '#/components/schemas/Recurrence'
        qualificationRuleType:
          type: string
          description: Type of qualification rule. Defaults to 'once'
          enum:
            - once
            - any
            - interval
        qualificationRuleInterval:
          type: integer
          description: >-
            Interval of qualification rule. Only set when qualificationRuleType
            is 'interval'
        qualificationRuleUnit:
          type: string
          description: >-
            Unit of measure of qualification rule. Only set when
            qualificationRuleType is 'interval'
          enum:
            - hour
            - day
            - week
            - month
        maxMembers:
          type: integer
          description: Smart campaign membership limit
          format: int32
        isCommunicationLimitEnabled:
          type: boolean
          description: >-
            Whether smart campaign communication limit is enabled (i.e. block
            non-operational emails). Defaults to false
        smartListId:
          type: integer
          description: Id of the smart campaign's child smart list
          format: int32
        flowId:
          type: integer
          description: Id of the smart campaign's child flow
          format: int32
        parentProgramId:
          type: integer
          description: >-
            Parent program Id. Present if smart campaign is under program or
            nested folder
          format: int32
        folder:
          $ref: '#/components/schemas/Folder'
        createdAt:
          type: string
          description: Datetime when the smart campaign was created
          format: date-time
        updatedAt:
          type: string
          description: Datetime when the smart campaign was most recently updated
          format: date-time
        workspace:
          type: string
          description: Name of the smart campaign workspace
        computedUrl:
          type: string
          description: URL to asset in Marketo Engage
        status:
          type: string
          description: Status of smart campaign
          enum:
            - Inactive
            - Single Run
            - Invalid
            - Recurring Run
            - Active
            - Requested
            - Never Run
    CreateSnippetRequest:
      required:
        - folder
        - name
      type: object
      properties:
        description:
          type: string
          description: Description of the snippet
        folder:
          $ref: '#/components/schemas/Folder'
        name:
          type: string
          description: Name of the snippet
    CreateSmartCampaignRequest:
      required:
        - folder
        - name
      type: object
      properties:
        description:
          type: string
          description: Description of the smart campaign
        folder:
          $ref: '#/components/schemas/Folder'
        name:
          type: string
          description: Name of the smart campaign
    UpdateSmartCampaignRequest:
      type: object
      properties:
        description:
          type: string
          description: Description of the smart campaign
        name:
          type: string
          description: Name of the smart campaign
    CloneSmartCampaignRequest:
      required:
        - folder
        - name
      type: object
      properties:
        description:
          type: string
          description: Description of the smart campaign
        folder:
          $ref: '#/components/schemas/Folder'
        name:
          type: string
          description: Name of the smart campaign
    ResponseOfEmailResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
        requestId:
          type: string
        result:
          type: array
          items:
            $ref: '#/components/schemas/EmailResponse'
        success:
          type: boolean
        warnings:
          type: array
          items:
            type: string
    ResponseOfGetEmailFullContentResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
        requestId:
          type: string
        result:
          type: array
          items:
            $ref: '#/components/schemas/GetEmailFullContentResponse'
        success:
          type: boolean
        warnings:
          type: array
          items:
            type: string
    ResponseOfGetLandingPageFullContentResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
        requestId:
          type: string
        result:
          type: array
          items:
            $ref: '#/components/schemas/GetLandingPageFullContentResponse'
        success:
          type: boolean
        warnings:
          type: array
          items:
            type: string
    ResponseOfEmailCCFieldsResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
        requestId:
          type: string
        result:
          type: array
          items:
            $ref: '#/components/schemas/EmailCCFields'
        success:
          type: boolean
        warnings:
          type: array
          items:
            type: string
    ResponseOfSmartListResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
        requestId:
          type: string
        result:
          type: array
          items:
            $ref: '#/components/schemas/SmartListResponse'
        success:
          type: boolean
        warnings:
          type: array
          items:
            type: string
    ResponseOfSmartListResponseWithRules:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
        requestId:
          type: string
        result:
          type: array
          items:
            $ref: '#/components/schemas/SmartListResponseWithRules'
        success:
          type: boolean
        warnings:
          type: array
          items:
            type: string
    Recurrence:
      required:
        - dayOfMonth
        - dayOfWeek
        - endAt
        - interval
        - intervalType
        - startAt
        - weekOfMonth
        - weekdayMask
        - weekdayOnly
      type: object
      properties:
        startAt:
          type: string
          description: >-
            Datetime of the first scheduled campaign to run. Required if setting
            recurrence. Not required to create a smart campaign that has no
            recurrence
          format: date-time
        endAt:
          type: string
          description: Datetime after which no further runs will be automatically scheduled
          format: date-time
        intervalType:
          type: string
          description: >-
            Recurrence interval. Not required to create a smart campaign that
            has no recurrence
          enum:
            - Daily
            - Weekly
            - Monthly
        interval:
          type: integer
          description: Number of interval units between recurrences
          format: int32
        weekdayOnly:
          type: boolean
          description: >-
            Only run smart campaign on weekdays. May only be set if intervalType
            is 'Daily'. Defaults to false
        weekdayMask:
          type: array
          description: >-
            String array of empty or one or more of 'Monday', 'Tuesday',
            'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'. May only be
            set if intervalType is 'Weekly'
          items:
            type: string
        dayOfMonth:
          type: integer
          description: >-
            Day of the month to recur. Permissible range 1-31. May only be set
            if intervalType is 'Monthly' and dayOfWeek and weekOfMonth are
            unset.
          format: int32
        dayOfWeek:
          type: string
          description: >-
            Day of the week to recur. May only be set if dayOfMonth is not set,
            and weekOfMonth is set
          format: int32
          enum:
            - Monday
            - Tuesday
            - Wednesday
            - Thursday
            - Friday
            - Saturday
            - Sunday
        weekOfMonth:
          type: integer
          description: >-
            Week of the month to recur. Permissible range 1-4. May only be set
            if dayOfMonth is not set, and dayOfWeek is set
          format: int32
    SmartListResponse:
      required:
        - createdAt
        - description
        - folder
        - id
        - name
        - updatedAt
        - url
        - workspace
      type: object
      properties:
        id:
          type: integer
          description: Id of the smart list
          format: int64
        name:
          type: string
          description: Name of the smart list
        description:
          type: string
          description: Description of the smart list
        createdAt:
          type: string
          description: Datetime the smart list was created
          format: date-time
        updatedAt:
          type: string
          description: Datetime the smart list was most recently updated
          format: date-time
        url:
          type: string
          description: Url of the smart list in the Marketo UI
        folder:
          $ref: '#/components/schemas/Folder'
        workspace:
          type: string
          description: Name of the workspace
    SmartListResponseWithRules:
      required:
        - createdAt
        - description
        - folder
        - id
        - name
        - updatedAt
        - url
        - workspace
      type: object
      properties:
        id:
          type: integer
          description: Id of the smart list
          format: int64
        name:
          type: string
          description: Name of the smart list
        description:
          type: string
          description: Description of the smart list
        createdAt:
          type: string
          description: Datetime the smart list was created
          format: date-time
        updatedAt:
          type: string
          description: Datetime the smart list was most recently updated
          format: date-time
        url:
          type: string
          description: Url of the smart list in the Marketo UI
        folder:
          $ref: '#/components/schemas/Folder'
        workspace:
          type: string
          description: Name of the workspace
        rules:
          $ref: '#/components/schemas/SmartListRules'
    ResponseOfStaticListResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
        requestId:
          type: string
        result:
          type: array
          items:
            $ref: '#/components/schemas/StaticListResponse'
        success:
          type: boolean
        warnings:
          type: array
          items:
            type: string
    StaticListResponse:
      required:
        - createdAt
        - description
        - folder
        - id
        - name
        - updatedAt
        - url
        - workspace
      type: object
      properties:
        id:
          type: integer
          description: Id of the static list
          format: int64
        name:
          type: string
          description: Name of the static list
        description:
          type: string
          description: Description of the static list
        createdAt:
          type: string
          description: Datetime the static list was created
          format: date-time
        updatedAt:
          type: string
          description: Datetime the static list was most recently updated
          format: date-time
        url:
          type: string
          description: Url of the static list in the Marketo UI
        folder:
          $ref: '#/components/schemas/Folder'
        workspace:
          type: string
          description: Name of the workspace
        computedUrl:
          type: string
    ResponseOfUpdateEmailFullContentResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
        requestId:
          type: string
        result:
          type: array
          items:
            $ref: '#/components/schemas/UpdateEmailFullContentResponse'
        success:
          type: boolean
        warnings:
          type: array
          items:
            type: string
    ResponseOfobject:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
        requestId:
          type: string
        result:
          type: array
          items:
            type: object
            properties: {}
        success:
          type: boolean
        warnings:
          type: array
          items:
            type: string
    AddFormFieldRequest:
      required:
        - fieldId
      type: object
      properties:
        blankFields:
          type: integer
          description: Number of blank fields to show when progressive profiling is enabled
          format: int32
        defaultValue:
          type: string
          description: Optional default value for the field
        fieldId:
          type: string
          description: Id of the field
        fieldWidth:
          type: integer
          description: Width of the input or select element
          format: int32
        formPrefill:
          type: boolean
          description: Whether the field should prefill. Default true
        isSensitive:
          type: boolean
          description: Whether the field is marked as sensitive. Default false
        hintText:
          type: string
          description: Hint text for the field
        initiallyChecked:
          type: boolean
          description: Whether the field should be checked upon loading. Default false
        instructions:
          type: string
          description: Instructions for the field
        label:
          type: string
          description: Label of the field
        labelToRight:
          type: boolean
          description: >-
            Whether the field label should be displayed to the right of the
            input/select element. Default false
        labelWidth:
          type: integer
          description: Width of the field label element
          format: int32
        maskInput:
          type: string
          description: Optional input mask for the field
        maxLength:
          type: integer
          description: Maximum length for text type fields
          format: int32
        maxValue:
          type: number
          description: Maximum value accepted by the field
          format: float
        minValue:
          type: number
          description: Minimum value accepted by the field
          format: float
        multiSelect:
          type: boolean
          description: Whether the field should allow multiple selections. Default false
        required:
          type: boolean
          description: Whether the field is required to submit the form. Default false
        validationMessage:
          type: string
          description: Validation message to display on failed validation
        values:
          type: string
          description: >-
            Comma-separated list of accepted values for the field. Only for
            select-field types
        visibleLines:
          type: integer
          description: Number of lines to display for the field element
          format: int32
    ResponseOfEmailTemplateContentResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
        requestId:
          type: string
        result:
          type: array
          items:
            $ref: '#/components/schemas/EmailTemplateContentResponse'
        success:
          type: boolean
        warnings:
          type: array
          items:
            type: string
    UpdateLandingPageDynamicContentRequest:
      type: object
      properties:
        backgroundColor:
          type: string
          description: background-color property of the HTML section
        borderColor:
          type: string
          description: border-color property of the HTML section
        borderStyle:
          type: string
          description: border-style property of the HTML section
        borderWidth:
          type: string
          description: border-width property of the HTML section
        height:
          type: string
          description: height property of the HTML section
        hideDesktop:
          type: boolean
          description: Hide the section when displayed on a desktop browser. Default false
        hideMobile:
          type: boolean
          description: Hide the section when displayed on a mobile browser. Default false
        imageOpenNewWindow:
          type: string
        left:
          type: string
          description: left property of the HTML section
        linkUrl:
          type: string
          description: URL parameter of a link type section
        opacity:
          type: string
          description: opacity property of the HTML section
        segment:
          type: string
          description: Name of the segment to display content section for
        top:
          type: string
          description: top property of the HTML section
        type:
          type: string
          description: Type of content section
        value:
          type: string
          description: Type of content section
        width:
          type: string
          description: width property of the HTML section
        zIndex:
          type: string
          description: z-index property of the HTML section
    ResponseOfSnippetContentResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
        requestId:
          type: string
        result:
          type: array
          items:
            $ref: '#/components/schemas/SnippetContentResponse'
        success:
          type: boolean
        warnings:
          type: array
          items:
            type: string
    UpdateEmailDynamicContentRequest:
      required:
        - type
        - value
      type: object
      properties:
        altText:
          type: string
          description: Sets the value of the alt parameter for the resulting img element
        externalUrl:
          type: string
        height:
          type: integer
          description: >-
            Overrides naitve height of the image. The resulting file will be
            resized to the given height
          format: int32
        image:
          type: string
          description: Multipart file that allows you to add an image from your computer
        linkUrl:
          type: string
        overWrite:
          type: boolean
          description: Allows overwriting of the existing image content section
        style:
          type: string
          description: Sets the value of the style parameter for the content section
        type:
          type: string
          description: Type of content to set for the section.
          enum:
            - Text
            - DynamicContent
            - Snippet
        value:
          type: string
          description: >-
            Value to set for the section. For type Text, the HTML content of the
            section. For type DynamicContent, the id of the segmentation to use
            for the content. For type Snippet, the id of the snippet to embed
        videoUrl:
          type: string
          description: >-
            Sets the Url of the video element. Videos must be either from
            YouTube or Vimeo
        width:
          type: integer
          description: >-
            Overrides native width of the image. The resulting file will be
            resized to the given width
          format: int32
    AddFormFieldVisibilityRequest:
      type: object
      properties:
        visibilityRule:
          $ref: '#/components/schemas/FormFieldVisibilityRequest'
    CreateTokenRequest:
      required:
        - folderType
        - name
        - type
        - value
      type: object
      properties:
        folderType:
          type: string
          description: Type of folder. 'Folder' or 'Program'
          enum:
            - Program
            - Folder
        name:
          type: string
          description: Name of the token. Max length is 50 characters)
        type:
          type: string
          description: Type of the token
          enum:
            - date
            - number
            - rich text
            - score
            - sfdc campaign
            - text
        value:
          type: string
          description: Value of the token
    ResponseOfLpTemplateResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
        requestId:
          type: string
        result:
          type: array
          items:
            $ref: '#/components/schemas/LpTemplateResponse'
        success:
          type: boolean
        warnings:
          type: array
          items:
            type: string
    LpTemplateGetContentResponse:
      required:
        - content
        - enableMunchkin
        - id
        - status
        - templateType
      type: object
      properties:
        content:
          type: string
          description: HTML content of the landing page template
        enableMunchkin:
          type: boolean
          description: Whether to enable munchkin on the derived pages. Defaults to true
        id:
          type: integer
          description: Unique integer id of the template
          format: int32
        status:
          type: string
          description: Status filter for draft or approved versions
          enum:
            - approved
            - draft
        templateType:
          type: string
          description: Type of template to create. Defaults to freeForm
          enum:
            - guided
            - freeForm
    FormVisibilityRuleDTO:
      type: object
      properties:
        altLabel:
          type: string
        operator:
          type: string
        picklistFilterValues:
          type: array
          items:
            $ref: '#/components/schemas/PickListDTO'
        subjectField:
          type: string
        values:
          type: array
          items:
            type: string
    ResponseOfLandingPageVariableResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
        requestId:
          type: string
        result:
          type: array
          items:
            $ref: '#/components/schemas/LandingPageVariableResponse'
        success:
          type: boolean
        warnings:
          type: array
          items:
            type: string
    CreateLandingPageRequest:
      required:
        - folder
        - name
        - template
      type: object
      properties:
        customHeadHTML:
          type: string
          description: Any custom HTML to embed in the <head> tag of the page
        description:
          type: string
          description: Description of the asset
        facebookOgTags:
          type: string
          description: Any OpenGraph meta tags to apply to the page
        folder:
          $ref: '#/components/schemas/Folder'
        keywords:
          type: string
        mobileEnabled:
          type: boolean
          description: >-
            Whether the page has mobile viewing enabled. Free-form pages only.
            Default false
        name:
          type: string
          description: Name of the landing page
        prefillForm:
          type: boolean
          description: >-
            Boolean to toggle whether forms embedded in the page will prefill.
            Default false
        robots:
          type: string
          description: Robots directives to apply to the pages meta tags
        template:
          type: integer
          description: Id of the template used
          format: int32
        title:
          type: string
          description: Title element of the landing page
        urlPageName:
          type: string
          description: URL path of the page. Derived from the name field if unset
        workspace:
          type: string
          description: Name of the workspace
    PickListDTO:
      type: object
      properties:
        isDefault:
          type: boolean
        label:
          type: string
        selected:
          type: boolean
        value:
          type: string
    SegmentsResponse:
      required:
        - segmentationId
      type: object
      properties:
        createdAt:
          type: string
          description: Datetime the asset was created
          format: date-time
        description:
          type: string
          description: Description of the asset
        id:
          type: integer
          description: Id of the asset
          format: int64
        name:
          type: string
          description: Name of the asset
        segmentationId:
          type: integer
          description: Id of the Segmentation
          format: int32
        updatedAt:
          type: string
          description: Datetime the asset was most recently updated
          format: date-time
        url:
          type: string
          description: Url of the asset in the Marketo UI
    ResponseOfEmailTemplateResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
        requestId:
          type: string
        result:
          type: array
          items:
            $ref: '#/components/schemas/EmailTemplateResponse'
        success:
          type: boolean
        warnings:
          type: array
          items:
            type: string
    ResponseOfEmailTemplateUsedByResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
        requestId:
          type: string
        result:
          type: array
          items:
            $ref: '#/components/schemas/EmailTemplateUsedByResponse'
        success:
          type: boolean
        warnings:
          type: array
          items:
            type: string
    ResponseOfFormUsedByResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
        requestId:
          type: string
        result:
          type: array
          items:
            $ref: '#/components/schemas/FormUsedByResponse'
        success:
          type: boolean
        warnings:
          type: array
          items:
            type: string
    CreateLpTemplateRequest:
      required:
        - folder
        - name
      type: object
      properties:
        description:
          type: string
          description: Description of the landing page template
        enableMunchkin:
          type: boolean
          description: Whether to enable munchkin on the derived pages. Defaults to true
        folder:
          $ref: '#/components/schemas/Folder'
        name:
          type: string
          description: Name of the landing page template
        templateType:
          type: string
          description: Type of template to create. Defaults to freeForm
          enum:
            - guided
            - freeForm
    UpdateThankYouPageRequest:
      type: object
      properties:
        thankyou:
          type: array
          description: JSON array of followup rules
          items:
            $ref: '#/components/schemas/ThankYouPageRequest'
    ProgramResponse:
      required:
        - channel
        - costs
        - folder
        - status
        - tags
        - type
      type: object
      properties:
        channel:
          type: string
          description: Channel of the program
        costs:
          type: array
          description: Lists of associated period costs
          items:
            $ref: '#/components/schemas/Costs'
        createdAt:
          type: string
          description: Datetime the asset was created
          format: date-time
        description:
          type: string
          description: Description of the asset
        endDate:
          type: string
          description: >-
            End date of the program. Applicable to event, email, and webinar
            type programs
          format: date-time
        folder:
          $ref: '#/components/schemas/Folder'
        id:
          type: integer
          description: Id of the asset
          format: int64
        name:
          type: string
          description: Name of the asset
        sfdcId:
          type: string
          description: SFDC id of the program if linked to an SFDC campaign
        sfdcName:
          type: string
          description: Name of the linked SFDC campaign if applicable
        startDate:
          type: string
          description: >-
            Start date of program. Applicable to event, email and webinar type
            programs
          format: date-time
        status:
          type: string
          description: >-
            Status of the program. Only valid for Email and engagement program
            types.
          enum:
            - locked
            - unlocked
            - 'on'
            - 'off'
        tags:
          type: array
          description: List of associated program tags
          items:
            $ref: '#/components/schemas/Tags'
        type:
          type: string
          description: Type of the program
          enum:
            - default
            - event
            - webinar
            - nurture
        updatedAt:
          type: string
          description: Datetime the asset was most recently updated
          format: date-time
        url:
          type: string
          description: Url of the asset in the Marketo UI
        workspace:
          type: string
          description: Name of the workspace
    FileResponse:
      required:
        - createdAt
        - folder
        - id
        - mimeType
        - name
        - size
        - updatedAt
        - url
      type: object
      properties:
        createdAt:
          type: string
          description: Datetime when the file was created
          format: date-time
        description:
          type: string
          description: Description of the file
        folder:
          $ref: '#/components/schemas/FileFolder'
        id:
          type: integer
          description: Id of the file
          format: int32
        mimeType:
          type: string
          description: MIME type of the file
        name:
          type: string
          description: Name of the file
        size:
          type: integer
          description: Size of the file in bytes
          format: int32
        updatedAt:
          type: string
          description: Datetime when the file was most recently updated
          format: date-time
        url:
          type: string
          description: Publically accessible URL of the file
    TagResponseGetAll:
      required:
        - applicableProgramTypes
        - required
        - tagType
      type: object
      properties:
        applicableProgramTypes:
          type: string
          description: Types of programs to which the tag can apply
        required:
          type: boolean
          description: Whether the tag is required for its applicable program types
        tagType:
          type: string
          description: Name of the tag
    ChannelProgression:
      type: object
      properties:
        description:
          type: string
          description: Description of the program status
        hidden:
          type: boolean
          description: Whether the status has been hidden
        name:
          type: string
          description: Name of the status
        type:
          type: string
          description: Type of the status
        step:
          type: integer
          description: Step number of the status
          format: int32
        success:
          type: boolean
          description: Whether this status is a success step for program members
    LandingPageContentResponse:
      required:
        - id
        - type
      type: object
      properties:
        content:
          type: object
          properties: {}
          description: >-
            Content of the section. Expected values vary based on type. Image:
            An image URL. RichText: HTML Content. HTML: HTML Content. Form: A
            form id. Rectangle: Empty. Snippet: A snippet id.
        followupType:
          type: string
          description: >-
            Follow-up behavior of a form. Only available for form-type content
            sections. Defaults to form defined behavior.
          enum:
            - url
            - lp
            - formDefined
        followupValue:
          type: string
          description: >-
            Where to follow-up on form submission. When followupType is lp,
            accepts the integer id of a landing page. For url, it accepts a url
            string.
        formattingOptions:
          $ref: '#/components/schemas/JsonNode'
        id:
          type: object
          properties: {}
          description: Id of the content section, may be a string or an int
        index:
          type: integer
          description: >-
            Index of the content section. Index orients the elements from lowest
            to highest
          format: int32
        type:
          type: string
          description: Type of content section
          enum:
            - Image
            - SocialButton
            - Form
            - DynamicContent
            - Rectangle
            - Snippet
            - RichText
            - HTML
            - Video
            - Poll
            - ReferralOffer
            - Sweepstakes
    UpdateEmailComponentContentRequest:
      required:
        - type
        - value
      type: object
      properties:
        altText:
          type: string
          description: Sets the value of the alt parameter for the resulting img element
        externalUrl:
          type: string
        height:
          type: integer
          description: >-
            Overrides naitve height of the image. The resulting file will be
            resized to the given height
          format: int32
        image:
          type: string
          description: Multipart file that allows you to load an image from your computer
        linkUrl:
          type: string
        overWrite:
          type: boolean
          description: Allows overwriting of the existing image content section
        style:
          type: string
          description: Sets the value of the style parameter for the content section
        textValue:
          type: string
        type:
          type: string
          description: Type of content to set for the section.
          enum:
            - Text
            - DynamicContent
            - Snippet
        value:
          type: string
          description: >-
            Value to set for the section. For type Text, the HTML content of the
            section. For type DynamicContent, the id of the segmentation to use
            for the content. For type Snippet, the id of the snippet to embed
        videoUrl:
          type: string
          description: >-
            Sets the Url of the video element. Videos must be either from
            YouTube or Vimeo
        width:
          type: integer
          description: >-
            Overrides native width of the image. The resulting file will be
            resized to the given width
          format: int32
    LandingPageResponse:
      required:
        - customHeadHTML
        - facebookOgTags
        - robots
        - title
      type: object
      properties:
        URL:
          type: string
          description: Url of the asset in the Marketo UI
        computedUrl:
          type: string
        createdAt:
          type: string
          description: Datetime the asset was created
          format: date-time
        customHeadHTML:
          type: string
          description: Any custom HTML to embed in the <head> tag of the page
        description:
          type: string
          description: Description of the asset
        facebookOgTags:
          type: string
          description: Any OpenGraph meta tags to apply to the page
        folder:
          $ref: '#/components/schemas/Folder'
        formPrefill:
          type: boolean
          description: >-
            Boolean to toggle whether forms embedded in the page will prefill.
            Default false
        id:
          type: integer
          description: Id of the asset
          format: int64
        keywords:
          type: string
        mobileEnabled:
          type: boolean
          description: >-
            Whether the page has mobile viewing enabled. Free-form pages only.
            Default false
        name:
          type: string
          description: Name of the asset
        robots:
          type: string
          description: Robots directives to apply to the pages meta tags
        status:
          type: string
          description: Status filter for draft or approved versions
        template:
          type: integer
          description: Id of the template used
          format: int32
        title:
          type: string
          description: Title element of the landing page
        updatedAt:
          type: string
          description: Datetime the asset was most recently updated
          format: date-time
        workspace:
          type: string
          description: Name of the workspace
    LandingPageRedirectRule:
      required:
        - createdAt
        - hostname
        - id
        - redirectFrom
        - redirectFromUrl
        - redirectTo
        - redirectToUrl
        - updatedAt
      type: object
      properties:
        id:
          type: integer
          description: Internal id for landing page redirect rule
          format: int64
        redirectFromUrl:
          type: string
          description: >-
            Redirect 'from' URL of the Landing Page. Combination of the hostname
            and redirectFrom landing page or path
        redirectToUrl:
          type: string
          description: >-
            Redirect 'to' URL of the Landing Page. Could be a Marketo landing
            page or non-Marketo URL.
        hostname:
          type: string
          description: >-
            The hostname for the landing pages. Branding domain or alias. Max
            255 characters.
        redirectFrom:
          $ref: '#/components/schemas/RedirectFrom'
        redirectTo:
          $ref: '#/components/schemas/RedirectTo'
        createdAt:
          type: string
          description: Datetime the landing page redirect rule was created
          format: date-time
        updatedAt:
          type: string
          description: Datetime the landing page redirect rule was most recently updated
          format: date-time
    LandingPageDomain:
      required:
        - hostname
        - type
      type: object
      properties:
        hostname:
          type: string
          description: The hostname for the landing pages
        type:
          type: string
          description: Specifies type of hostname
          enum:
            - domain
            - domain-alias
    ResponseOfFileResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
        requestId:
          type: string
        result:
          type: array
          items:
            $ref: '#/components/schemas/FileResponse'
        success:
          type: boolean
        warnings:
          type: array
          items:
            type: string
    FolderResponse:
      required:
        - createdAt
        - folderId
        - folderType
        - id
        - isArchive
        - name
        - parent
        - path
        - updatedAt
        - url
      type: object
      properties:
        accessZoneId:
          type: integer
          format: int32
        createdAt:
          type: string
          description: Datetime the folder was created
          format: date-time
        description:
          type: string
          description: Description of the folder
        folderId:
          $ref: '#/components/schemas/Folder'
        folderType:
          type: string
          description: Type of folder
          enum:
            - Email
            - Email Batch Program
            - Email Template
            - Image
            - Landing Page
            - Landing Page Form
            - Landing Page Template
            - Marketing Event
            - Marketing Folder
            - Marketing Program
            - Nurture Program
            - Report
            - Revenue Cycle Model
            - Zone
        id:
          type: integer
          description: Id of the folder
          format: int32
        isArchive:
          type: boolean
          description: Archival status of the folder
        isSystem:
          type: boolean
          description: Whether the folder is system-managed
        name:
          type: string
          description: Name of the folder. Not applicable for Programs
        parent:
          $ref: '#/components/schemas/Folder'
        path:
          type: string
          description: Path of the folder
        updatedAt:
          type: string
          description: Datetime the folder was last updated
          format: date-time
        url:
          type: string
          description: Url of the folder
        workspace:
          type: string
          description: Name of the workspace
    CreateFileRequest:
      required:
        - file
        - folder
        - name
      type: object
      properties:
        description:
          type: string
          description: Description of the asset
        file:
          type: string
          description: Multipart file. Content of the file.
        folder:
          $ref: '#/components/schemas/Folder'
        insertOnly:
          type: boolean
          description: >-
            Whether the calls hould fail if there is already an existing file
            with the same name
        name:
          type: string
          description: Name of the File
    UpdateFieldPosition:
      required:
        - columnNumber
        - fieldName
        - rowNumber
      type: object
      properties:
        columnNumber:
          type: integer
          description: Column number of the field
          format: int32
        fieldList:
          type: array
          description: >-
            List of positions inside the fields. Only valid if the target is a
            fieldset
          items:
            $ref: '#/components/schemas/UpdateFieldPosition'
        fieldName:
          type: string
          description: Id of the field
        rowNumber:
          type: integer
          description: Row number of the field
          format: int32
    LpFormFieldResponse:
      type: object
      properties:
        blankFields:
          type: integer
          format: int32
        columnNumber:
          type: integer
          format: int32
        dataType:
          type: string
        defaultValue:
          type: string
        fieldMetaData:
          type: object
          properties: {}
        fieldWidth:
          type: integer
          format: int32
        fields:
          type: array
          items:
            type: string
        formPrefill:
          type: boolean
        isSensitive:
          type: boolean
        hintText:
          type: string
        id:
          type: string
        instructions:
          type: string
        label:
          type: string
        labelWidth:
          type: integer
          format: int32
        maxLength:
          type: integer
          format: int32
        required:
          type: boolean
        rowNumber:
          type: integer
          format: int32
        text:
          type: string
        validationMessage:
          type: object
          properties: {}
        visibilityRules:
          $ref: '#/components/schemas/FormFieldVisibilityRuleResponse'
    TagResponse:
      required:
        - applicableProgramTypes
        - required
        - tagType
      type: object
      properties:
        allowableValues:
          type: string
          description: The list of acceptable values for the tag type
        applicableProgramTypes:
          type: string
          description: Types of programs to which the tag can apply
        required:
          type: boolean
          description: Whether the tag is required for its applicable program types
        tagType:
          type: string
          description: Name of the tag
    FormVisibilityRuleResponse:
      type: object
      properties:
        formFieldId:
          type: string
        ruleType:
          type: string
        rules:
          type: array
          items:
            $ref: '#/components/schemas/FormVisibilityRuleDTO'
    MultipartFile:
      type: object
    ResponseOfTokenResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
        requestId:
          type: string
        result:
          type: array
          items:
            $ref: '#/components/schemas/TokenResponse'
        success:
          type: boolean
        warnings:
          type: array
          items:
            type: string
    UpdateLpTemplateRequest:
      type: object
      properties:
        description:
          type: string
          description: Description of the landing page template
        enableMunchkin:
          type: boolean
          description: Whether to enable munchkin on the derived pages. Defaults to true
        name:
          type: string
          description: Name of the landing page template
    ResponseOfIdResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
        requestId:
          type: string
        result:
          type: array
          items:
            $ref: '#/components/schemas/IdResponse'
        success:
          type: boolean
        warnings:
          type: array
          items:
            type: string
    ResponseOfSendSampleResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
        requestId:
          type: string
        result:
          type: array
          items:
            $ref: '#/components/schemas/SendSampleResponse'
        success:
          type: boolean
        warnings:
          type: array
          items:
            type: string
    CloneEmailRequest:
      required:
        - folder
        - name
      type: object
      properties:
        description:
          type: string
          description: Description of the asset
        folder:
          $ref: '#/components/schemas/Folder'
        name:
          type: string
          description: Name of the new email asset
        operational:
          type: boolean
          description: >-
            Whether the email is operational. Operational emails bypass
            unsubscribe status. Defaults to false
    SendSampleEmailRequest:
      required:
        - emailAddress
      type: object
      properties:
        emailAddress:
          type: string
          description: Email address to receive sample email
        leadId:
          type: string
          description: >-
            Id of a lead to impersonate. Tokens and dynamic content will be
            populated as though it were sent to the lead.
        textOnly:
          type: boolean
          description: >-
            Whether to send to text only version along with the HTML version.
            Default false.
    Tags:
      required:
        - tagType
        - tagValue
      type: object
      properties:
        tagType:
          type: string
          description: Name of the tag
        tagValue:
          type: string
          description: Value of the tag
    UpdateFileContentRequest:
      required:
        - file
        - id
      type: object
      properties:
        file:
          type: string
          description: Multipart file. Content of the file.
        id:
          type: integer
          description: Id of the file
          format: int32
    UpdateEmailFullContentRequest:
      required:
        - content
      type: object
      properties:
        content:
          type: string
          description: >-
            Multipart file. File containing HTML document to update with. File
            cannot include JavaScript or script tags.
    LandingPageVariableResponse:
      required:
        - id
      type: object
      properties:
        id:
          type: string
          description: Integer id of the variable
        type:
          type: string
          description: Type of the variable
        value:
          type: object
          properties: {}
          description: Value of the variable
    ResponseOfBrowseAllPrograms:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
        requestId:
          type: string
        result:
          type: array
          items:
            $ref: '#/components/schemas/BrowseAllPrograms'
        success:
          type: boolean
        warnings:
          type: array
          items:
            type: string
    ResponseOfFolderResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
        requestId:
          type: string
        result:
          type: array
          items:
            $ref: '#/components/schemas/FolderResponse'
        success:
          type: boolean
        warnings:
          type: array
          items:
            type: string
    ResponseOfFolderContentResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
        requestId:
          type: string
        result:
          type: array
          items:
            $ref: '#/components/schemas/FolderContentResponse'
        success:
          type: boolean
        warnings:
          type: array
          items:
            type: string
    ResponseOfSegmentationResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
        requestId:
          type: string
        result:
          type: array
          items:
            $ref: '#/components/schemas/SegmentationResponse'
        success:
          type: boolean
        warnings:
          type: array
          items:
            type: string
    FormKnownVisitorDTO:
      type: object
      properties:
        template:
          type: string
        type:
          type: string
    ResponseOfEmailContentResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
        requestId:
          type: string
        result:
          type: array
          items:
            $ref: '#/components/schemas/EmailContentResponse'
        success:
          type: boolean
        warnings:
          type: array
          items:
            type: string
    ResponseOfSnippetResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
        requestId:
          type: string
        result:
          type: array
          items:
            $ref: '#/components/schemas/SnippetResponse'
        success:
          type: boolean
        warnings:
          type: array
          items:
            type: string
    AddFormFieldSetRequest:
      required:
        - label
      type: object
      properties:
        label:
          type: string
          description: Label of the fieldset
    IdResponse:
      required:
        - id
      type: object
      properties:
        id:
          type: integer
          description: Id of the asset
          format: int32
    SendSampleResponse:
      required:
        - result
        - service
      type: object
      properties:
        service:
          type: string
          description: API call name
          enum:
            - sendTestEmail
        result:
          type: boolean
          description: Whether call was successful
    UpdateSnippetDynamicContentRequest:
      type: object
      properties:
        type:
          type: string
          description: Type of dynamic content section
          enum:
            - Typeofcontent.Either'HTML'or'Text'
        value:
          type: string
          description: Value of the dynamic content section
    EmailDynamicContentResponse:
      type: object
      properties:
        content:
          type: array
          description: List of variations in the section
          items:
            $ref: '#/components/schemas/EmailDynamicContentItem'
        createdAt:
          type: string
          description: Datetime when the section was created
          format: date-time
        id:
          type: integer
          description: Id of the dnamic content section
          format: int32
        segmentation:
          type: integer
          description: Segmentation to which the section is linked
          format: int32
        updatedAt:
          type: string
          description: Datetime when the section was last updated
          format: date-time
    CloneLpTemplateRequest:
      required:
        - folder
        - name
      type: object
      properties:
        description:
          type: string
          description: Description of the landing page template
        folder:
          $ref: '#/components/schemas/Folder'
        name:
          type: string
          description: Name of the landing page template
    CreateLpFormRequest:
      required:
        - folder
      type: object
      properties:
        description:
          type: string
          description: Description of the form
        folder:
          $ref: '#/components/schemas/Folder'
        fontFamily:
          type: string
          description: font-family property for the form
        fontSize:
          type: string
          description: font-size property of the form
        knownVisitor:
          $ref: '#/components/schemas/FormKnownVisitorDTO'
        labelPosition:
          type: string
          description: Default positioning of labels.
        language:
          type: string
          description: Language of the form
        locale:
          type: string
          description: Locale of the form
        name:
          type: string
          description: Name of the form
        progressiveProfiling:
          type: boolean
          description: Whether progressive profiling is enabled for the form
        theme:
          type: string
          description: CSS theme for the form to use
    Costs:
      required:
        - cost
        - startDate
      type: object
      properties:
        cost:
          type: integer
          description: Amount of the cost
          format: int32
        note:
          type: string
          description: Notes on the cost
        startDate:
          type: string
          description: Start date of the period cost
          format: date-time
    FormFieldVisibilityRuleResponse:
      type: object
      properties:
        ruleType:
          type: string
        rules:
          type: array
          items:
            $ref: '#/components/schemas/FormVisibilityRuleDTO'
    TokenDTO:
      type: object
      properties:
        computedUrl:
          type: string
        name:
          type: string
        type:
          type: string
        value:
          type: string
    ThankYouPageRequest:
      required:
        - followupType
        - followupValue
        - operator
        - subjectField
        - values
      type: object
      properties:
        default:
          type: boolean
          description: >-
            When true, this is the default rule, and will be applied when a user
            does not qualify for any of the other rules
        followupType:
          type: string
          description: >-
            Type of followup. When set to url, will follow to the url set in
            followupValue. When set to lp, will follow to the Landing page with
            the id given in followupValue
        followupValue:
          type: string
          description: >-
            Where to follow to on submission. Given as a URL or and Integer
            depending on followupType
        operator:
          type: string
          description: Operator to evaluate aginst the subject field
        subjectField:
          type: string
          description: Field to apply to operator to
        values:
          type: array
          description: Comma-separated list of values to compare to with the operator
          items:
            type: string
    FormThankYouPageDTO:
      type: object
      properties:
        default:
          type: boolean
        followupType:
          type: string
        followupValue:
          type: object
          properties: {}
        operator:
          type: string
        subjectField:
          type: string
        values:
          type: array
          items:
            type: string
    ResponseOfFormVisibilityRuleResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
        requestId:
          type: string
        result:
          type: array
          items:
            $ref: '#/components/schemas/FormVisibilityRuleResponse'
        success:
          type: boolean
        warnings:
          type: array
          items:
            type: string
    EmailDynamicContentItem:
      type: object
      properties:
        content:
          type: string
        id:
          type: string
        segmentId:
          type: string
        segmentName:
          type: string
        type:
          type: string
    ResponseOfLandingPageDynamicContentResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
        requestId:
          type: string
        result:
          type: array
          items:
            $ref: '#/components/schemas/LandingPageDynamicContentResponse'
        success:
          type: boolean
        warnings:
          type: array
          items:
            type: string
    AddRichTextRequest:
      required:
        - text
      type: object
      properties:
        text:
          type: string
          description: Multipart file. HTML Content for the rich text field.
    Folder:
      required:
        - id
        - type
      type: object
      properties:
        id:
          type: integer
          description: Id of the folder
          format: int32
        type:
          type: string
          description: Type of folder
          enum:
            - Folder
            - Program
      description: JSON representation of a folder
    SnippetFolder:
      required:
        - folderName
        - type
        - value
      type: object
      properties:
        value:
          type: integer
          description: Id of the folder
          format: int32
        type:
          type: string
          description: Type of folder
          enum:
            - Folder
            - Program
        folderName:
          type: string
          description: Name of folder
      description: JSON representation of a folder
    RedirectFrom:
      required:
        - type
        - value
      type: object
      properties:
        type:
          type: string
          description: Type of redirect landing page
          enum:
            - landingPageId
            - path
        value:
          type: string
          description: >-
            Value for redirect landing page. If type is 'path' this must not
            begin with forward slash
      description: JSON representation of 'from' redirect landing page rule
    RedirectTo:
      required:
        - type
        - value
      type: object
      properties:
        type:
          type: string
          description: Type of redirect landing page
          enum:
            - landingPageId
            - url
        value:
          type: string
          description: Value for redirect landing page
      description: JSON representation of 'to' redirect landing page rule
    SmartListRules:
      required:
        - filterMatchType
        - filters
        - triggers
      type: object
      properties:
        filterMatchType:
          type: string
          description: Smart list filter match type (rule logic)
          enum:
            - All
            - Any
            - Advanced
        triggers:
          type: array
          description: List of smart list triggers
          items:
            type: string
        filters:
          type: array
          description: List of smart list filters
          items:
            $ref: '#/components/schemas/SmartListFilters'
      description: JSON representation of smart list rules
    SmartListFilters:
      required:
        - conditions
        - id
        - name
        - operator
        - ruleType
        - ruleTypeId
      type: object
      properties:
        id:
          type: integer
          description: Id of the filter
          format: int32
        name:
          type: string
          description: Name of filter
        ruleTypeId:
          type: integer
          description: Id of the rule type
          format: int32
        ruleType:
          type: string
          description: Name of rule type
        operator:
          type: string
          description: Name of operator
        conditions:
          type: array
          description: List of smart list conditions
          items:
            $ref: '#/components/schemas/SmartListConditions'
      description: JSON representation of smart list filters
    SmartListConditions:
      required:
        - activityAttributeId
        - activityAttributeName
        - isPrimary
        - operator
        - values
      type: object
      properties:
        activityAttributeId:
          type: integer
          description: Id of the activity attribute
          format: int32
        activityAttributeName:
          type: string
          description: Name of activity attribute
        operator:
          type: string
          description: Value of operator
        values:
          type: array
          description: List of values
          items:
            type: string
        isPrimary:
          type: boolean
          description: >-
            Whether the condition is primary or not (first condition of the
            smart list)
      description: JSON representation of smart list conditions
    EmailTemplateContentResponse:
      required:
        - content
        - id
        - status
      type: object
      properties:
        content:
          type: string
          description: HTML content of the template
        id:
          type: integer
          description: Unique integer id of the email template
          format: int32
        status:
          type: string
          description: Status filter for draft or approved versions
          enum:
            - approved
            - draft
    GetEmailFullContentResponse:
      required:
        - content
        - id
        - status
      type: object
      properties:
        content:
          type: string
          description: HTML content of the email
        id:
          type: integer
          description: Unique integer id of the email
          format: int32
        status:
          type: string
          description: Status filter for draft or approved versions
          enum:
            - approved
            - draft
    GetLandingPageFullContentResponse:
      required:
        - content
        - id
      type: object
      properties:
        content:
          type: string
          description: HTML content of the landing page
        id:
          type: integer
          description: Unique integer id of the landing page
          format: int32
    UpdateEmailFullContentResponse:
      required:
        - id
      type: object
      properties:
        id:
          type: integer
          description: Unique integer id of the email
          format: int32
    ResponseOfChannelResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
        requestId:
          type: string
        result:
          type: array
          items:
            $ref: '#/components/schemas/ChannelResponse'
        success:
          type: boolean
        warnings:
          type: array
          items:
            type: string
    ResponseOfEmailModuleResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
        requestId:
          type: string
        result:
          type: array
          items:
            $ref: '#/components/schemas/EmailModuleResponse'
        success:
          type: boolean
        warnings:
          type: array
          items:
            type: string
    ResponseOfEmailVariableResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
        requestId:
          type: string
        result:
          type: array
          items:
            $ref: '#/components/schemas/EmailVariableResponse'
        success:
          type: boolean
        warnings:
          type: array
          items:
            type: string
    ResponseOfSmartCampaignResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
        requestId:
          type: string
        result:
          type: array
          items:
            $ref: '#/components/schemas/SmartCampaignResponse'
        success:
          type: boolean
        warnings:
          type: array
          items:
            type: string
    SegmentationResponse:
      required:
        - folder
        - status
      type: object
      properties:
        createdAt:
          type: string
          description: Datetime the asset was created
          format: date-time
        description:
          type: string
          description: Description of the asset
        folder:
          $ref: '#/components/schemas/Folder'
        id:
          type: integer
          description: Id of the asset
          format: int64
        name:
          type: string
          description: Name of the asset
        status:
          type: string
          description: Status filter for draft or approved versions
        updatedAt:
          type: string
          description: Datetime the asset was most recently updated
          format: date-time
        url:
          type: string
          description: Url of the asset in the Marketo UI
        workspace:
          type: string
          description: Name of the workspace
    ResponseOfTagResponseGetAll:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
        requestId:
          type: string
        result:
          type: array
          items:
            $ref: '#/components/schemas/TagResponseGetAll'
        success:
          type: boolean
        warnings:
          type: array
          items:
            type: string
    ReArrangeRequest:
      type: object
      properties:
        positions:
          type: array
          items:
            $ref: '#/components/schemas/UpdateFieldPosition'
    Error:
      required:
        - code
        - message
      type: object
      properties:
        code:
          type: string
          description: >-
            Error code of the error. See full list of error codes <a
            href="https://developers.marketo.com/rest-api/error-codes/">here</a>
        message:
          type: string
          description: Message describing the cause of the error
    SubmitButtonRequest:
      type: object
      properties:
        buttonPosition:
          type: integer
          description: Location in pixels of the button relative to the left of the form
          format: int32
        buttonStyle:
          type: string
          description: Style of the button
        label:
          type: string
          description: Label text of the button
        waitingLabel:
          type: string
          description: Waiting text of the button
    UpdateSnippetRequest:
      type: object
      properties:
        description:
          type: string
          description: Description of the snippet
        isArchive:
          type: string
          description: Archival status of the snippet
        name:
          type: string
          description: Name of the snippet
    FieldsMetaDataResponse:
      required:
        - id
      type: object
      properties:
        dataType:
          type: string
          description: Type of field
        defaultValue:
          type: string
          description: Optional default value for the field
        description:
          type: string
          description: Description of the field
        fieldMaskValues:
          type: string
          description: Optional input mask for the field
        fieldWidth:
          type: integer
          description: Width of the input or select element
          format: int32
        id:
          type: string
          description: Id of the field
        initiallyChecked:
          type: boolean
          description: Whether the field should be checked upon loading. Default false
        isLabelToRight:
          type: boolean
          description: >-
            Whether the field label should be displayed to the right of the
            input/select element. Default false
        isMultiselect:
          type: boolean
          description: Whether the field should allow multiple selections. Default false
        isRequired:
          type: boolean
          description: Whether the field is required to submit the form. Default false
        isSensitive:
          type: boolean
          description: Whether the field is marked as sensitive. Default false
        labelWidth:
          type: integer
          description: Width of the field label element
          format: int32
        maxLength:
          type: integer
          description: Maximum length for text type fields
          format: int32
        maximumNumber:
          type: number
          description: Maximum value accepted by the field
          format: float
        minimumNumber:
          type: number
          description: Minimum value accepted by the field
          format: float
        picklistValues:
          type: string
          description: Comma-separated list of available picklist values for the field
        placeholderText:
          type: string
          description: Placeholder text for the field
        validationMessage:
          type: string
          description: Validation message to display on failed validation
        visibleRows:
          type: integer
          description: Number of rows visible for progressive profiling
          format: int32
    DeleteTokenRequest:
      type: object
      properties:
        folderType:
          type: string
          enum:
            - Program
            - Folder
        name:
          type: string
        type:
          type: string
    UpdateVariableRequest:
      type: object
      properties:
        value:
          type: string
          description: Value to update variable with
        moduleId:
          type: string
          description: >-
            Module that variable is associated with. Required for updating
            module variables. Not needed for global variables.
    UpdateEmailTemplateContentRequest:
      type: object
      properties:
        content:
          type: string
          description: Content for the email template. Multipart file.
    UpdateEmailComponentDataRequest:
      type: object
      properties:
        fromEmail:
          $ref: '#/components/schemas/EmailHeaderField'
        fromName:
          $ref: '#/components/schemas/EmailHeaderField'
        replyTO:
          $ref: '#/components/schemas/EmailHeaderField'
        subject:
          $ref: '#/components/schemas/EmailHeaderField'
x-original-swagger-version: '2.0'
